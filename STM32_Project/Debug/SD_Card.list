
SD_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000591c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bdc  08005bdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be4  08005be4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b1e8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f44  00000000  00000000  0002b267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000aa0  00000000  00000000  0002d1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ef  00000000  00000000  0002dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021de5  00000000  00000000  0002e43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f8a4  00000000  00000000  00050224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6bd7  00000000  00000000  0005fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a7c  00000000  00000000  001266a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a8c 	.word	0x08005a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a8c 	.word	0x08005a8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80004ca:	b08e      	sub	sp, #56	; 0x38
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fa25 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f85b 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f8e1 	bl	800069c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004da:	f000 f8bf 	bl	800065c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004de:	f002 fe7d 	bl	80031dc <MX_FATFS_Init>
  FIL my_file;
  UINT testbyte;



  if( f_mount(&my_fatfs, SDPath, 1) == FR_OK){
 80004e2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80004e6:	f103 0318 	add.w	r3, r3, #24
 80004ea:	3b14      	subs	r3, #20
 80004ec:	2201      	movs	r2, #1
 80004ee:	4923      	ldr	r1, [pc, #140]	; (800057c <main+0xb8>)
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 fde7 	bl	80050c4 <f_mount>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d13d      	bne.n	8000578 <main+0xb4>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	481f      	ldr	r0, [pc, #124]	; (8000580 <main+0xbc>)
 8000504:	f000 fd22 	bl	8000f4c <HAL_GPIO_WritePin>
	  char my_path[] = "WRITE1.TXT";
 8000508:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800050c:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <main+0xc0>)
 800050e:	3b74      	subs	r3, #116	; 0x74
 8000510:	ca07      	ldmia	r2, {r0, r1, r2}
 8000512:	c303      	stmia	r3!, {r0, r1}
 8000514:	801a      	strh	r2, [r3, #0]
 8000516:	3302      	adds	r3, #2
 8000518:	0c12      	lsrs	r2, r2, #16
 800051a:	701a      	strb	r2, [r3, #0]
	  f_open(&my_file, my_path, FA_WRITE | FA_CREATE_ALWAYS);
 800051c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000520:	3934      	subs	r1, #52	; 0x34
 8000522:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000526:	3b24      	subs	r3, #36	; 0x24
 8000528:	220a      	movs	r2, #10
 800052a:	4618      	mov	r0, r3
 800052c:	f004 fe10 	bl	8005150 <f_open>
	  uint8_t my_data[] = "Hello guys my name is citak and u are in Ç the citakworks place!";
 8000530:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <main+0xc4>)
 8000536:	3bb8      	subs	r3, #184	; 0xb8
 8000538:	4611      	mov	r1, r2
 800053a:	2242      	movs	r2, #66	; 0x42
 800053c:	4618      	mov	r0, r3
 800053e:	f005 fa97 	bl	8005a70 <memcpy>
	  f_write(&my_file, my_data, sizeof(my_data), &testbyte);
 8000542:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000546:	3b28      	subs	r3, #40	; 0x28
 8000548:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800054c:	3938      	subs	r1, #56	; 0x38
 800054e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000552:	3824      	subs	r0, #36	; 0x24
 8000554:	2242      	movs	r2, #66	; 0x42
 8000556:	f004 ffc7 	bl	80054e8 <f_write>
	  f_close(&my_file);
 800055a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800055e:	3b24      	subs	r3, #36	; 0x24
 8000560:	4618      	mov	r0, r3
 8000562:	f005 f9d3 	bl	800590c <f_close>
	  HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	; 0x32
 8000568:	f000 fa4a 	bl	8000a00 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <main+0xbc>)
 8000574:	f000 fcea 	bl	8000f4c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0xb4>
 800057a:	bf00      	nop
 800057c:	200000b4 	.word	0x200000b4
 8000580:	40020c00 	.word	0x40020c00
 8000584:	08005aa4 	.word	0x08005aa4
 8000588:	08005ab0 	.word	0x08005ab0

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fa3b 	bl	8005a16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000600:	2348      	movs	r3, #72	; 0x48
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000608:	2303      	movs	r3, #3
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fcb5 	bl	8000f80 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f882 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2102      	movs	r1, #2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ff17 	bl	8001470 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000648:	f000 f86c 	bl	8000724 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <MX_SDIO_SD_Init+0x3c>)
 8000664:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <MX_SDIO_SD_Init+0x38>)
 8000686:	2203      	movs	r2, #3
 8000688:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000028 	.word	0x20000028
 8000698:	40012c00 	.word	0x40012c00

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_GPIO_Init+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_GPIO_Init+0x80>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_GPIO_Init+0x80>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0x80>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <MX_GPIO_Init+0x80>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_GPIO_Init+0x80>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0x84>)
 80006f2:	f000 fc2b 	bl	8000f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0x84>)
 8000710:	f000 fa80 	bl	8000c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <HAL_MspInit+0x4c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800076e:	2007      	movs	r0, #7
 8000770:	f000 fa1c 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <HAL_SD_MspInit+0xc0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d14a      	bne.n	8000838 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a26      	ldr	r2, [pc, #152]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <HAL_SD_MspInit+0xc4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80007f6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000808:	230c      	movs	r3, #12
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <HAL_SD_MspInit+0xc8>)
 8000814:	f000 f9fe 	bl	8000c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000818:	2304      	movs	r3, #4
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000828:	230c      	movs	r3, #12
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <HAL_SD_MspInit+0xcc>)
 8000834:	f000 f9ee 	bl	8000c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40023800 	.word	0x40023800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f890 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <SystemInit+0x20>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <SystemInit+0x20>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008cc:	f7ff ffea 	bl	80008a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f6:	f005 f897 	bl	8005a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fa:	f7ff fde3 	bl	80004c4 <main>
  bx  lr    
 80008fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800090c:	08005bec 	.word	0x08005bec
  ldr r2, =_sbss
 8000910:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000914:	200000ec 	.word	0x200000ec

08000918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <HAL_Init+0x40>)
 8000926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_Init+0x40>)
 8000932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x40>)
 800093e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f931 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff feee 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023c00 	.word	0x40023c00

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f93b 	bl	8000bfa <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f911 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	200000ac 	.word	0x200000ac

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200000ac 	.word	0x200000ac

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffde 	bl	80009e8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
         );
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
	...

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff8e 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff47 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff5c 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff8e 	bl	8000b00 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffb0 	bl	8000b68 <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e16b      	b.n	8000f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 815a 	bne.w	8000f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	69b9      	ldr	r1, [r7, #24]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80b4 	beq.w	8000f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a5f      	ldr	r2, [pc, #380]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a5b      	ldr	r2, [pc, #364]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_GPIO_Init+0x314>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d02b      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_GPIO_Init+0x318>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x222>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <HAL_GPIO_Init+0x31c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x21e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4f      	ldr	r2, [pc, #316]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x216>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x212>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x32c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x20e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x20a>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00e      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae90 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021c00 	.word	0x40021c00
 8000f48:	40013c00 	.word	0x40013c00

08000f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f68:	e003      	b.n	8000f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	041a      	lsls	r2, r3, #16
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	619a      	str	r2, [r3, #24]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e267      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d075      	beq.n	800108a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f9e:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000faa:	4b85      	ldr	r3, [pc, #532]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d112      	bne.n	8000fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb6:	4b82      	ldr	r3, [pc, #520]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fc2:	d10b      	bne.n	8000fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	4b7e      	ldr	r3, [pc, #504]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d05b      	beq.n	8001088 <HAL_RCC_OscConfig+0x108>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d157      	bne.n	8001088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e242      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d106      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x74>
 8000fe6:	4b76      	ldr	r3, [pc, #472]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a75      	ldr	r2, [pc, #468]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8000fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e01d      	b.n	8001030 <HAL_RCC_OscConfig+0xb0>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x98>
 8000ffe:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a6f      	ldr	r2, [pc, #444]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b6d      	ldr	r3, [pc, #436]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a6c      	ldr	r2, [pc, #432]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xb0>
 8001018:	4b69      	ldr	r3, [pc, #420]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a68      	ldr	r2, [pc, #416]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b66      	ldr	r3, [pc, #408]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a65      	ldr	r2, [pc, #404]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fcd6 	bl	80009e8 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fcd2 	bl	80009e8 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e207      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0xc0>
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fcc2 	bl	80009e8 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fcbe 	bl	80009e8 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e1f3      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0xe8>
 8001086:	e000      	b.n	800108a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d063      	beq.n	800115e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001096:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d11c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d116      	bne.n	80010e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <HAL_RCC_OscConfig+0x152>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e1c7      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4937      	ldr	r1, [pc, #220]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	e03a      	b.n	800115e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d020      	beq.n	8001132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <HAL_RCC_OscConfig+0x244>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fc77 	bl	80009e8 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff fc73 	bl	80009e8 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e1a8      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	4925      	ldr	r1, [pc, #148]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e015      	b.n	800115e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_RCC_OscConfig+0x244>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fc56 	bl	80009e8 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001140:	f7ff fc52 	bl	80009e8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e187      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	2b00      	cmp	r3, #0
 8001168:	d036      	beq.n	80011d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d016      	beq.n	80011a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_RCC_OscConfig+0x248>)
 8001174:	2201      	movs	r2, #1
 8001176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001178:	f7ff fc36 	bl	80009e8 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff fc32 	bl	80009e8 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e167      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_OscConfig+0x240>)
 8001194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x200>
 800119e:	e01b      	b.n	80011d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_RCC_OscConfig+0x248>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fc1f 	bl	80009e8 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	e00e      	b.n	80011cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff fc1b 	bl	80009e8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d907      	bls.n	80011cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e150      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
 80011c0:	40023800 	.word	0x40023800
 80011c4:	42470000 	.word	0x42470000
 80011c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80011ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ea      	bne.n	80011ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 8097 	beq.w	8001314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ea:	4b81      	ldr	r3, [pc, #516]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10f      	bne.n	8001216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a7c      	ldr	r2, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b7a      	ldr	r3, [pc, #488]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b77      	ldr	r3, [pc, #476]	; (80013f4 <HAL_RCC_OscConfig+0x474>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001222:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <HAL_RCC_OscConfig+0x474>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <HAL_RCC_OscConfig+0x474>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbdb 	bl	80009e8 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fbd7 	bl	80009e8 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e10c      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_OscConfig+0x474>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x2ea>
 800125c:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001260:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6713      	str	r3, [r2, #112]	; 0x70
 8001268:	e01c      	b.n	80012a4 <HAL_RCC_OscConfig+0x324>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x30c>
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001276:	4a5e      	ldr	r2, [pc, #376]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6713      	str	r3, [r2, #112]	; 0x70
 800127e:	4b5c      	ldr	r3, [pc, #368]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6713      	str	r3, [r2, #112]	; 0x70
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0x324>
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 800128e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001290:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6713      	str	r3, [r2, #112]	; 0x70
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d015      	beq.n	80012d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fb9c 	bl	80009e8 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fb98 	bl	80009e8 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e0cb      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ca:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0ee      	beq.n	80012b4 <HAL_RCC_OscConfig+0x334>
 80012d6:	e014      	b.n	8001302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fb86 	bl	80009e8 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e0:	f7ff fb82 	bl	80009e8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e0b5      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1ee      	bne.n	80012e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 800130e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80a1 	beq.w	8001460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b08      	cmp	r3, #8
 8001328:	d05c      	beq.n	80013e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d141      	bne.n	80013b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_RCC_OscConfig+0x478>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fb56 	bl	80009e8 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff fb52 	bl	80009e8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e087      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	085b      	lsrs	r3, r3, #1
 8001376:	3b01      	subs	r3, #1
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	491b      	ldr	r1, [pc, #108]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x478>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fb2b 	bl	80009e8 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff fb27 	bl	80009e8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e05c      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x416>
 80013b4:	e054      	b.n	8001460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_RCC_OscConfig+0x478>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fb14 	bl	80009e8 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c4:	f7ff fb10 	bl	80009e8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e045      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x444>
 80013e2:	e03d      	b.n	8001460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e038      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40007000 	.word	0x40007000
 80013f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x4ec>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d028      	beq.n	800145c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d121      	bne.n	800145c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d11a      	bne.n	800145c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800142c:	4013      	ands	r3, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001434:	4293      	cmp	r3, r2
 8001436:	d111      	bne.n	800145c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	3b01      	subs	r3, #1
 8001446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001448:	429a      	cmp	r2, r3
 800144a:	d107      	bne.n	800145c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0cc      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001484:	4b68      	ldr	r3, [pc, #416]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d90c      	bls.n	80014ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0b8      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	494d      	ldr	r1, [pc, #308]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d044      	beq.n	8001590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d119      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e07f      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d003      	beq.n	800152e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152a:	2b03      	cmp	r3, #3
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e06f      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e067      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f023 0203 	bic.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4934      	ldr	r1, [pc, #208]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001560:	f7ff fa42 	bl	80009e8 <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	e00a      	b.n	800157e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001568:	f7ff fa3e 	bl	80009e8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e04f      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 020c 	and.w	r2, r3, #12
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d1eb      	bne.n	8001568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d20c      	bcs.n	80015b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e032      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4916      	ldr	r1, [pc, #88]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f6:	f000 f821 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	490a      	ldr	r1, [pc, #40]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	5ccb      	ldrb	r3, [r1, r3]
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9a2 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023c00 	.word	0x40023c00
 800162c:	40023800 	.word	0x40023800
 8001630:	08005b38 	.word	0x08005b38
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001640:	b094      	sub	sp, #80	; 0x50
 8001642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	647b      	str	r3, [r7, #68]	; 0x44
 8001648:	2300      	movs	r3, #0
 800164a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800164c:	2300      	movs	r3, #0
 800164e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001654:	4b79      	ldr	r3, [pc, #484]	; (800183c <HAL_RCC_GetSysClockFreq+0x200>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d00d      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x40>
 8001660:	2b08      	cmp	r3, #8
 8001662:	f200 80e1 	bhi.w	8001828 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x34>
 800166a:	2b04      	cmp	r3, #4
 800166c:	d003      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0x3a>
 800166e:	e0db      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001670:	4b73      	ldr	r3, [pc, #460]	; (8001840 <HAL_RCC_GetSysClockFreq+0x204>)
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001674:	e0db      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001676:	4b73      	ldr	r3, [pc, #460]	; (8001844 <HAL_RCC_GetSysClockFreq+0x208>)
 8001678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800167a:	e0d8      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800167c:	4b6f      	ldr	r3, [pc, #444]	; (800183c <HAL_RCC_GetSysClockFreq+0x200>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <HAL_RCC_GetSysClockFreq+0x200>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d063      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001692:	4b6a      	ldr	r3, [pc, #424]	; (800183c <HAL_RCC_GetSysClockFreq+0x200>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	099b      	lsrs	r3, r3, #6
 8001698:	2200      	movs	r2, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
 800169c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
 80016a6:	2300      	movs	r3, #0
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
 80016aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016ae:	4622      	mov	r2, r4
 80016b0:	462b      	mov	r3, r5
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	0159      	lsls	r1, r3, #5
 80016bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c0:	0150      	lsls	r0, r2, #5
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4621      	mov	r1, r4
 80016c8:	1a51      	subs	r1, r2, r1
 80016ca:	6139      	str	r1, [r7, #16]
 80016cc:	4629      	mov	r1, r5
 80016ce:	eb63 0301 	sbc.w	r3, r3, r1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016e0:	4659      	mov	r1, fp
 80016e2:	018b      	lsls	r3, r1, #6
 80016e4:	4651      	mov	r1, sl
 80016e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ea:	4651      	mov	r1, sl
 80016ec:	018a      	lsls	r2, r1, #6
 80016ee:	4651      	mov	r1, sl
 80016f0:	ebb2 0801 	subs.w	r8, r2, r1
 80016f4:	4659      	mov	r1, fp
 80016f6:	eb63 0901 	sbc.w	r9, r3, r1
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800170e:	4690      	mov	r8, r2
 8001710:	4699      	mov	r9, r3
 8001712:	4623      	mov	r3, r4
 8001714:	eb18 0303 	adds.w	r3, r8, r3
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	462b      	mov	r3, r5
 800171c:	eb49 0303 	adc.w	r3, r9, r3
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800172e:	4629      	mov	r1, r5
 8001730:	024b      	lsls	r3, r1, #9
 8001732:	4621      	mov	r1, r4
 8001734:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001738:	4621      	mov	r1, r4
 800173a:	024a      	lsls	r2, r1, #9
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001742:	2200      	movs	r2, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
 8001746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800174c:	f7fe fd3c 	bl	80001c8 <__aeabi_uldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4613      	mov	r3, r2
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001758:	e058      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_RCC_GetSysClockFreq+0x200>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	2200      	movs	r2, #0
 8001762:	4618      	mov	r0, r3
 8001764:	4611      	mov	r1, r2
 8001766:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001774:	4642      	mov	r2, r8
 8001776:	464b      	mov	r3, r9
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0159      	lsls	r1, r3, #5
 8001782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001786:	0150      	lsls	r0, r2, #5
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4641      	mov	r1, r8
 800178e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001792:	4649      	mov	r1, r9
 8001794:	eb63 0b01 	sbc.w	fp, r3, r1
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017ac:	ebb2 040a 	subs.w	r4, r2, sl
 80017b0:	eb63 050b 	sbc.w	r5, r3, fp
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	00eb      	lsls	r3, r5, #3
 80017be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c2:	00e2      	lsls	r2, r4, #3
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	4643      	mov	r3, r8
 80017ca:	18e3      	adds	r3, r4, r3
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	464b      	mov	r3, r9
 80017d0:	eb45 0303 	adc.w	r3, r5, r3
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017e2:	4629      	mov	r1, r5
 80017e4:	028b      	lsls	r3, r1, #10
 80017e6:	4621      	mov	r1, r4
 80017e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017ec:	4621      	mov	r1, r4
 80017ee:	028a      	lsls	r2, r1, #10
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f6:	2200      	movs	r2, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	61fa      	str	r2, [r7, #28]
 80017fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001800:	f7fe fce2 	bl	80001c8 <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_RCC_GetSysClockFreq+0x200>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	3301      	adds	r3, #1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800181c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800181e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001826:	e002      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetSysClockFreq+0x204>)
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800182c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001830:	4618      	mov	r0, r3
 8001832:	3750      	adds	r7, #80	; 0x50
 8001834:	46bd      	mov	sp, r7
 8001836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	00f42400 	.word	0x00f42400
 8001844:	007a1200 	.word	0x007a1200

08001848 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e022      	b.n	80018a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7fe ff87 	bl	8000780 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f814 	bl	80018a8 <HAL_SD_InitCard>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00a      	b.n	80018a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af04      	add	r7, sp, #16
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80018c4:	2376      	movs	r3, #118	; 0x76
 80018c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681d      	ldr	r5, [r3, #0]
 80018cc:	466c      	mov	r4, sp
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e0:	4628      	mov	r0, r5
 80018e2:	f000 ff49 	bl	8002778 <SDIO_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80018ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e04f      	b.n	8001998 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80018f8:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_SD_InitCard+0xf8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 ff81 	bl	800280a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_SD_InitCard+0xf8>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff f876 	bl	8000a00 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fe79 	bl	800260c <SD_PowerON>
 800191a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e02e      	b.n	8001998 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fd98 	bl	8002470 <SD_InitCard>
 8001940:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00b      	beq.n	8001960 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01b      	b.n	8001998 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001968:	4618      	mov	r0, r3
 800196a:	f000 ffe0 	bl	800292e <SDMMC_CmdBlockLength>
 800196e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00f      	beq.n	8001996 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_SD_InitCard+0xfc>)
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	422580a0 	.word	0x422580a0
 80019a4:	004005ff 	.word	0x004005ff

080019a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b092      	sub	sp, #72	; 0x48
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80019b6:	f7ff f817 	bl	80009e8 <HAL_GetTick>
 80019ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1c5      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f040 81b8 	bne.w	8001d58 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80019ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	441a      	add	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d907      	bls.n	8001a0c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a00:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e1ac      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d002      	beq.n	8001a2a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	025b      	lsls	r3, r3, #9
 8001a34:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001a36:	2390      	movs	r3, #144	; 0x90
 8001a38:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001a42:	2301      	movs	r3, #1
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f107 0214 	add.w	r2, r7, #20
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 ff40 	bl	80028d6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d90a      	bls.n	8001a72 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 ffa4 	bl	80029b6 <SDMMC_CmdReadMultiBlock>
 8001a6e:	6478      	str	r0, [r7, #68]	; 0x44
 8001a70:	e009      	b.n	8001a86 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2201      	movs	r2, #1
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ff77 	bl	8002972 <SDMMC_CmdReadSingleBlock>
 8001a84:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d012      	beq.n	8001ab2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a7e      	ldr	r2, [pc, #504]	; (8001c8c <HAL_SD_ReadBlocks+0x2e4>)
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e159      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ab6:	e061      	b.n	8001b7c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03c      	beq.n	8001b40 <HAL_SD_ReadBlocks+0x198>
 8001ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d039      	beq.n	8001b40 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	643b      	str	r3, [r7, #64]	; 0x40
 8001ad0:	e033      	b.n	8001b3a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fe79 	bl	80027ce <SDIO_ReadFIFO>
 8001adc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae8:	3301      	adds	r3, #1
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aee:	3b01      	subs	r3, #1
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	3301      	adds	r3, #1
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b04:	3b01      	subs	r3, #1
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	3301      	adds	r3, #1
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	0e1b      	lsrs	r3, r3, #24
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b30:	3b01      	subs	r3, #1
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b36:	3301      	adds	r3, #1
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
 8001b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b3c:	2b07      	cmp	r3, #7
 8001b3e:	d9c8      	bls.n	8001ad2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001b40:	f7fe ff52 	bl	80009e8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d902      	bls.n	8001b56 <HAL_SD_ReadBlocks+0x1ae>
 8001b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d112      	bne.n	8001b7c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	; (8001c8c <HAL_SD_ReadBlocks+0x2e4>)
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0f4      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b82:	f240 332a 	movw	r3, #810	; 0x32a
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d095      	beq.n	8001ab8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d022      	beq.n	8001be0 <HAL_SD_ReadBlocks+0x238>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d91f      	bls.n	8001be0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d01b      	beq.n	8001be0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 ff69 	bl	8002a84 <SDMMC_CmdStopTransfer>
 8001bb2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_SD_ReadBlocks+0x2e4>)
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0c2      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_SD_ReadBlocks+0x254>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <HAL_SD_ReadBlocks+0x2e4>)
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c08:	f043 0208 	orr.w	r2, r3, #8
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0a1      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_SD_ReadBlocks+0x2e4>)
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	f043 0202 	orr.w	r2, r3, #2
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e087      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d064      	beq.n	8001d2e <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_SD_ReadBlocks+0x2e4>)
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c70:	f043 0220 	orr.w	r2, r3, #32
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06d      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
 8001c8a:	bf00      	nop
 8001c8c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fd9a 	bl	80027ce <SDIO_ReadFIFO>
 8001c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	3b01      	subs	r3, #1
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	0e1b      	lsrs	r3, r3, #24
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce8:	3301      	adds	r3, #1
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001cf2:	f7fe fe79 	bl	80009e8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d902      	bls.n	8001d08 <HAL_SD_ReadBlocks+0x360>
 8001d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d112      	bne.n	8001d2e <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_SD_ReadBlocks+0x3c8>)
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e01b      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_SD_ReadBlocks+0x39a>
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1a6      	bne.n	8001c90 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f240 523a 	movw	r2, #1338	; 0x53a
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3748      	adds	r7, #72	; 0x48
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	004005ff 	.word	0x004005ff

08001d74 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b092      	sub	sp, #72	; 0x48
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001d82:	f7fe fe31 	bl	80009e8 <HAL_GetTick>
 8001d86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e16d      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f040 8160 	bne.w	8002074 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	441a      	add	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d907      	bls.n	8001dd8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e154      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d002      	beq.n	8001df6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	025b      	lsls	r3, r3, #9
 8001e00:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e02:	2390      	movs	r3, #144	; 0x90
 8001e04:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f107 0218 	add.w	r2, r7, #24
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fd5a 	bl	80028d6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d90a      	bls.n	8001e3e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fe02 	bl	8002a3e <SDMMC_CmdWriteMultiBlock>
 8001e3a:	6478      	str	r0, [r7, #68]	; 0x44
 8001e3c:	e009      	b.n	8001e52 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2210      	movs	r2, #16
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fdd5 	bl	80029fa <SDMMC_CmdWriteSingleBlock>
 8001e50:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a8b      	ldr	r2, [pc, #556]	; (800208c <HAL_SD_WriteBlocks+0x318>)
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e66:	431a      	orrs	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e101      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001e82:	e065      	b.n	8001f50 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d040      	beq.n	8001f14 <HAL_SD_WriteBlocks+0x1a0>
 8001e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03d      	beq.n	8001f14 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e9c:	e037      	b.n	8001f0e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eac:	3b01      	subs	r3, #1
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	3b01      	subs	r3, #1
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	061a      	lsls	r2, r3, #24
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	3301      	adds	r3, #1
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f107 0214 	add.w	r2, r7, #20
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fc70 	bl	80027e8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f10:	2b07      	cmp	r3, #7
 8001f12:	d9c4      	bls.n	8001e9e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001f14:	f7fe fd68 	bl	80009e8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d902      	bls.n	8001f2a <HAL_SD_WriteBlocks+0x1b6>
 8001f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d112      	bne.n	8001f50 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a57      	ldr	r2, [pc, #348]	; (800208c <HAL_SD_WriteBlocks+0x318>)
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e098      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f56:	f240 331a 	movw	r3, #794	; 0x31a
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d091      	beq.n	8001e84 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d022      	beq.n	8001fb4 <HAL_SD_WriteBlocks+0x240>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d91f      	bls.n	8001fb4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fd7f 	bl	8002a84 <SDMMC_CmdStopTransfer>
 8001f86:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3e      	ldr	r2, [pc, #248]	; (800208c <HAL_SD_WriteBlocks+0x318>)
 8001f94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e066      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_SD_WriteBlocks+0x25c>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_SD_WriteBlocks+0x318>)
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	f043 0208 	orr.w	r2, r3, #8
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e045      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_SD_WriteBlocks+0x318>)
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	f043 0202 	orr.w	r2, r3, #2
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e02b      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_SD_WriteBlocks+0x318>)
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	f043 0210 	orr.w	r2, r3, #16
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e011      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f240 523a 	movw	r2, #1338	; 0x53a
 8002066:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	e006      	b.n	8002082 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3748      	adds	r7, #72	; 0x48
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	004005ff 	.word	0x004005ff

08002090 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800209e:	0f9b      	lsrs	r3, r3, #30
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020bc:	0e1b      	lsrs	r3, r3, #24
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f0:	0d1b      	lsrs	r3, r3, #20
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	b2da      	uxtb	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800210e:	0bdb      	lsrs	r3, r3, #15
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002120:	0b9b      	lsrs	r3, r3, #14
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002144:	0b1b      	lsrs	r3, r3, #12
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	2b00      	cmp	r3, #0
 800215e:	d163      	bne.n	8002228 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002164:	009a      	lsls	r2, r3, #2
 8002166:	f640 73fc 	movw	r3, #4092	; 0xffc
 800216a:	4013      	ands	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002170:	0f92      	lsrs	r2, r2, #30
 8002172:	431a      	orrs	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800217c:	0edb      	lsrs	r3, r3, #27
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	b2da      	uxtb	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	0e1b      	lsrs	r3, r3, #24
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	b2da      	uxtb	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c4:	0bdb      	lsrs	r3, r3, #15
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7e1b      	ldrb	r3, [r3, #24]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	3302      	adds	r3, #2
 80021e8:	2201      	movs	r2, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80021f2:	fb03 f202 	mul.w	r2, r3, r2
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7a1b      	ldrb	r3, [r3, #8]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	2201      	movs	r2, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002214:	0a52      	lsrs	r2, r2, #9
 8002216:	fb03 f202 	mul.w	r2, r3, r2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002224:	661a      	str	r2, [r3, #96]	; 0x60
 8002226:	e031      	b.n	800228c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	2b01      	cmp	r3, #1
 800222e:	d11d      	bne.n	800226c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	431a      	orrs	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	3301      	adds	r3, #1
 800224c:	029a      	lsls	r2, r3, #10
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	661a      	str	r2, [r3, #96]	; 0x60
 800226a:	e00f      	b.n	800228c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_SD_GetCardCSD+0x344>)
 8002272:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e09d      	b.n	80023c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002290:	0b9b      	lsrs	r3, r3, #14
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a2:	09db      	lsrs	r3, r3, #7
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	0fdb      	lsrs	r3, r3, #31
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	0f5b      	lsrs	r3, r3, #29
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	0d9b      	lsrs	r3, r3, #22
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	0d5b      	lsrs	r3, r3, #21
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	b2db      	uxtb	r3, r3
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	0bdb      	lsrs	r3, r3, #15
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	0b9b      	lsrs	r3, r3, #14
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	0b5b      	lsrs	r3, r3, #13
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	b2da      	uxtb	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	0b1b      	lsrs	r3, r3, #12
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	b2da      	uxtb	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	004005ff 	.word	0x004005ff

080023d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f970 	bl	8002728 <SD_SendStatus>
 8002448:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	0a5b      	lsrs	r3, r3, #9
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002466:	693b      	ldr	r3, [r7, #16]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b094      	sub	sp, #80	; 0x50
 8002474:	af04      	add	r7, sp, #16
 8002476:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002478:	2301      	movs	r3, #1
 800247a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f9d0 	bl	8002826 <SDIO_GetPowerState>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800248c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002490:	e0b8      	b.n	8002604 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	2b03      	cmp	r3, #3
 8002498:	d02f      	beq.n	80024fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fbb7 	bl	8002c12 <SDMMC_CmdSendCID>
 80024a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80024a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	e0a9      	b.n	8002604 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f9fa 	bl	80028b0 <SDIO_GetResponse>
 80024bc:	4602      	mov	r2, r0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2104      	movs	r1, #4
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f9f1 	bl	80028b0 <SDIO_GetResponse>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2108      	movs	r1, #8
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f9e8 	bl	80028b0 <SDIO_GetResponse>
 80024e0:	4602      	mov	r2, r0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	210c      	movs	r1, #12
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f9df 	bl	80028b0 <SDIO_GetResponse>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d00d      	beq.n	800251e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f107 020e 	add.w	r2, r7, #14
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fbbd 	bl	8002c8c <SDMMC_CmdSetRelAdd>
 8002512:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <SD_InitCard+0xae>
    {
      return errorstate;
 800251a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251c:	e072      	b.n	8002604 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	2b03      	cmp	r3, #3
 8002524:	d036      	beq.n	8002594 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002526:	89fb      	ldrh	r3, [r7, #14]
 8002528:	461a      	mov	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 fb87 	bl	8002c4e <SDMMC_CmdSendCSD>
 8002540:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254a:	e05b      	b.n	8002604 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f9ac 	bl	80028b0 <SDIO_GetResponse>
 8002558:	4602      	mov	r2, r0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2104      	movs	r1, #4
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f9a3 	bl	80028b0 <SDIO_GetResponse>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2108      	movs	r1, #8
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f99a 	bl	80028b0 <SDIO_GetResponse>
 800257c:	4602      	mov	r2, r0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	210c      	movs	r1, #12
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f991 	bl	80028b0 <SDIO_GetResponse>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2104      	movs	r1, #4
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f988 	bl	80028b0 <SDIO_GetResponse>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0d1a      	lsrs	r2, r3, #20
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fd6e 	bl	8002090 <HAL_SD_GetCardCSD>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025be:	e021      	b.n	8002604 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	2200      	movs	r2, #0
 80025cc:	461c      	mov	r4, r3
 80025ce:	4615      	mov	r5, r2
 80025d0:	4622      	mov	r2, r4
 80025d2:	462b      	mov	r3, r5
 80025d4:	4608      	mov	r0, r1
 80025d6:	f000 fa77 	bl	8002ac8 <SDMMC_CmdSelDesel>
 80025da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80025dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80025e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e4:	e00e      	b.n	8002604 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681d      	ldr	r5, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	466c      	mov	r4, sp
 80025ee:	f103 0210 	add.w	r2, r3, #16
 80025f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025f8:	3304      	adds	r3, #4
 80025fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fc:	4628      	mov	r0, r5
 80025fe:	f000 f8bb 	bl	8002778 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3740      	adds	r7, #64	; 0x40
 8002608:	46bd      	mov	sp, r7
 800260a:	bdb0      	pop	{r4, r5, r7, pc}

0800260c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fa72 	bl	8002b0e <SDMMC_CmdGoIdleState>
 800262a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	e072      	b.n	800271c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fa85 	bl	8002b4a <SDMMC_CmdOperCond>
 8002640:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fa5b 	bl	8002b0e <SDMMC_CmdGoIdleState>
 8002658:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <SD_PowerON+0x5e>
    {
      return errorstate;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	e05b      	b.n	800271c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	2b01      	cmp	r3, #1
 8002670:	d137      	bne.n	80026e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fa85 	bl	8002b88 <SDMMC_CmdAppCommand>
 800267e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d02d      	beq.n	80026e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800268a:	e047      	b.n	800271c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fa78 	bl	8002b88 <SDMMC_CmdAppCommand>
 8002698:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	e03b      	b.n	800271c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	491e      	ldr	r1, [pc, #120]	; (8002724 <SD_PowerON+0x118>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fa8e 	bl	8002bcc <SDMMC_CmdAppOperCommand>
 80026b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026bc:	e02e      	b.n	800271c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f8f3 	bl	80028b0 <SDIO_GetResponse>
 80026ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	0fdb      	lsrs	r3, r3, #31
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <SD_PowerON+0xcc>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <SD_PowerON+0xce>
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]

    count++;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3301      	adds	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d802      	bhi.n	80026f2 <SD_PowerON+0xe6>
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0cc      	beq.n	800268c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d902      	bls.n	8002702 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	e00c      	b.n	800271c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	645a      	str	r2, [r3, #68]	; 0x44
 8002712:	e002      	b.n	800271a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	c1100000 	.word	0xc1100000

08002728 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800273c:	e018      	b.n	8002770 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fabf 	bl	8002cce <SDMMC_CmdSendStatus>
 8002750:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SD_SendStatus+0x34>
  {
    return errorstate;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	e009      	b.n	8002770 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f8a4 	bl	80028b0 <SDIO_GetResponse>
 8002768:	4602      	mov	r2, r0
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002778:	b084      	sub	sp, #16
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	f107 001c 	add.w	r0, r7, #28
 8002786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800278e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002790:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002792:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002796:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800279a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800279e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80027a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80027b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	b004      	add	sp, #16
 80027cc:	4770      	bx	lr

080027ce <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0303 	and.w	r3, r3, #3
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002860:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002866:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800286c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800287c:	f023 030f 	bic.w	r3, r3, #15
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	b2db      	uxtb	r3, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3314      	adds	r3, #20
 80028be:	461a      	mov	r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
}  
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80028fc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002902:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002908:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002920:	2300      	movs	r3, #0

}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b088      	sub	sp, #32
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800293c:	2310      	movs	r3, #16
 800293e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002940:	2340      	movs	r3, #64	; 0x40
 8002942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ff74 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	2110      	movs	r1, #16
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f9d7 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002968:	69fb      	ldr	r3, [r7, #28]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b088      	sub	sp, #32
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002980:	2311      	movs	r3, #17
 8002982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002984:	2340      	movs	r3, #64	; 0x40
 8002986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800298c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	4619      	mov	r1, r3
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff52 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	2111      	movs	r1, #17
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f9b5 	bl	8002d14 <SDMMC_GetCmdResp1>
 80029aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029ac:	69fb      	ldr	r3, [r7, #28]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80029c4:	2312      	movs	r3, #18
 80029c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff30 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	2112      	movs	r1, #18
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f993 	bl	8002d14 <SDMMC_GetCmdResp1>
 80029ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029f0:	69fb      	ldr	r3, [r7, #28]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b088      	sub	sp, #32
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002a08:	2318      	movs	r3, #24
 8002a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a0c:	2340      	movs	r3, #64	; 0x40
 8002a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff0e 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	2118      	movs	r1, #24
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f971 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a34:	69fb      	ldr	r3, [r7, #28]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b088      	sub	sp, #32
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002a4c:	2319      	movs	r3, #25
 8002a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a50:	2340      	movs	r3, #64	; 0x40
 8002a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff feec 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	2119      	movs	r1, #25
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f94f 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a78:	69fb      	ldr	r3, [r7, #28]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002a90:	230c      	movs	r3, #12
 8002a92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff feca 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <SDMMC_CmdStopTransfer+0x40>)
 8002ab0:	210c      	movs	r1, #12
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f92e 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002aba:	69fb      	ldr	r3, [r7, #28]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	05f5e100 	.word	0x05f5e100

08002ac8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002adc:	2340      	movs	r3, #64	; 0x40
 8002ade:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	4619      	mov	r1, r3
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff fea6 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	2107      	movs	r1, #7
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f909 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b088      	sub	sp, #32
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fe85 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fb23 	bl	8003184 <SDMMC_GetCmdError>
 8002b3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b40:	69fb      	ldr	r3, [r7, #28]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b088      	sub	sp, #32
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002b52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002b56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b5c:	2340      	movs	r3, #64	; 0x40
 8002b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff fe66 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fab6 	bl	80030e8 <SDMMC_GetCmdResp7>
 8002b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002b96:	2337      	movs	r3, #55	; 0x37
 8002b98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b9a:	2340      	movs	r3, #64	; 0x40
 8002b9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ba8:	f107 0308 	add.w	r3, r7, #8
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fe47 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	2137      	movs	r1, #55	; 0x37
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8aa 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002be2:	2329      	movs	r3, #41	; 0x29
 8002be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bf4:	f107 0308 	add.w	r3, r7, #8
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fe21 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f9bd 	bl	8002f80 <SDMMC_GetCmdResp3>
 8002c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c08:	69fb      	ldr	r3, [r7, #28]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b088      	sub	sp, #32
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002c22:	23c0      	movs	r3, #192	; 0xc0
 8002c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fe03 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f957 	bl	8002ef0 <SDMMC_GetCmdResp2>
 8002c42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c44:	69fb      	ldr	r3, [r7, #28]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002c5c:	2309      	movs	r3, #9
 8002c5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fde4 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f938 	bl	8002ef0 <SDMMC_GetCmdResp2>
 8002c80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c82:	69fb      	ldr	r3, [r7, #28]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c9e:	2340      	movs	r3, #64	; 0x40
 8002ca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002caa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cac:	f107 0308 	add.w	r3, r7, #8
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fdc5 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	2103      	movs	r1, #3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f99d 	bl	8002ffc <SDMMC_GetCmdResp6>
 8002cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b088      	sub	sp, #32
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002cdc:	230d      	movs	r3, #13
 8002cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ce0:	2340      	movs	r3, #64	; 0x40
 8002ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fda4 	bl	8002842 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	210d      	movs	r1, #13
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f807 	bl	8002d14 <SDMMC_GetCmdResp1>
 8002d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002d08:	69fb      	ldr	r3, [r7, #28]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d22:	4b70      	ldr	r3, [pc, #448]	; (8002ee4 <SDMMC_GetCmdResp1+0x1d0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <SDMMC_GetCmdResp1+0x1d4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0a5a      	lsrs	r2, r3, #9
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	61fa      	str	r2, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002d40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d44:	e0c9      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ef      	beq.n	8002d36 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ea      	bne.n	8002d36 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002d72:	2304      	movs	r3, #4
 8002d74:	e0b1      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0a6      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	22c5      	movs	r2, #197	; 0xc5
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fd7f 	bl	8002896 <SDIO_GetCommandResponse>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d001      	beq.n	8002da6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e099      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002da6:	2100      	movs	r1, #0
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fd81 	bl	80028b0 <SDIO_GetResponse>
 8002dae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <SDMMC_GetCmdResp1+0x1d8>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e08d      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	da02      	bge.n	8002dca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dc8:	e087      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002dd4:	2340      	movs	r3, #64	; 0x40
 8002dd6:	e080      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	e079      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df4:	e071      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e04:	e069      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e14:	e061      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e24:	e059      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e34:	e051      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e44:	e049      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002e50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e54:	e041      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002e60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e64:	e039      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e74:	e031      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e84:	e029      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002e90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e94:	e021      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002ea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ea4:	e019      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002eb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eb4:	e011      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002ec0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ec4:	e009      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002ed0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002ed4:	e001      	b.n	8002eda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	10624dd3 	.word	0x10624dd3
 8002eec:	fdffe008 	.word	0xfdffe008

08002ef0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <SDMMC_GetCmdResp2+0x88>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <SDMMC_GetCmdResp2+0x8c>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0a5b      	lsrs	r3, r3, #9
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	60fa      	str	r2, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f1c:	e026      	b.n	8002f6c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ea      	bne.n	8002f0e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	e00e      	b.n	8002f6c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e003      	b.n	8002f6c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	22c5      	movs	r2, #197	; 0xc5
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	10624dd3 	.word	0x10624dd3

08002f80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <SDMMC_GetCmdResp3+0x74>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ff8 <SDMMC_GetCmdResp3+0x78>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a5b      	lsrs	r3, r3, #9
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	fb02 f303 	mul.w	r3, r2, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e5a      	subs	r2, r3, #1
 8002fa2:	60fa      	str	r2, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fac:	e01b      	b.n	8002fe6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ef      	beq.n	8002f9e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e003      	b.n	8002fe6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	22c5      	movs	r2, #197	; 0xc5
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	460b      	mov	r3, r1
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800300a:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <SDMMC_GetCmdResp6+0xe4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a35      	ldr	r2, [pc, #212]	; (80030e4 <SDMMC_GetCmdResp6+0xe8>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	0a5b      	lsrs	r3, r3, #9
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	61fa      	str	r2, [r7, #28]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800302a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800302e:	e052      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003034:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ea      	bne.n	8003020 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2204      	movs	r2, #4
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800305c:	2304      	movs	r3, #4
 800305e:	e03a      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003072:	2301      	movs	r3, #1
 8003074:	e02f      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fc0d 	bl	8002896 <SDIO_GetCommandResponse>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	7afb      	ldrb	r3, [r7, #11]
 8003082:	4293      	cmp	r3, r2
 8003084:	d001      	beq.n	800308a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003086:	2301      	movs	r3, #1
 8003088:	e025      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	22c5      	movs	r2, #197	; 0xc5
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003090:	2100      	movs	r1, #0
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff fc0c 	bl	80028b0 <SDIO_GetResponse>
 8003098:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e011      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80030bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c0:	e009      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80030cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d0:	e001      	b.n	80030d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80030d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000
 80030e4:	10624dd3 	.word	0x10624dd3

080030e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <SDMMC_GetCmdResp7+0x94>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <SDMMC_GetCmdResp7+0x98>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0a5b      	lsrs	r3, r3, #9
 80030fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	60fa      	str	r2, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003110:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003114:	e02c      	b.n	8003170 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ef      	beq.n	8003106 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ea      	bne.n	8003106 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003142:	2304      	movs	r3, #4
 8003144:	e014      	b.n	8003170 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003158:	2301      	movs	r3, #1
 800315a:	e009      	b.n	8003170 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800316e:	2300      	movs	r3, #0
  
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	20000000 	.word	0x20000000
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <SDMMC_GetCmdError+0x50>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <SDMMC_GetCmdError+0x54>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0a5b      	lsrs	r3, r3, #9
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	60fa      	str	r2, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80031ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031b0:	e009      	b.n	80031c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f1      	beq.n	80031a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	22c5      	movs	r2, #197	; 0xc5
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000000 	.word	0x20000000
 80031d8:	10624dd3 	.word	0x10624dd3

080031dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80031e0:	4904      	ldr	r1, [pc, #16]	; (80031f4 <MX_FATFS_Init+0x18>)
 80031e2:	4805      	ldr	r0, [pc, #20]	; (80031f8 <MX_FATFS_Init+0x1c>)
 80031e4:	f002 fc08 	bl	80059f8 <FATFS_LinkDriver>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <MX_FATFS_Init+0x20>)
 80031ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200000b4 	.word	0x200000b4
 80031f8:	08005b48 	.word	0x08005b48
 80031fc:	200000b0 	.word	0x200000b0

08003200 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003204:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800321a:	f000 f86b 	bl	80032f4 <BSP_SD_IsDetected>
 800321e:	4603      	mov	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d001      	beq.n	8003228 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e005      	b.n	8003234 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <BSP_SD_Init+0x2c>)
 800322a:	f7fe fb0d 	bl	8001848 <HAL_SD_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8003232:	79fb      	ldrb	r3, [r7, #7]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000028 	.word	0x20000028

08003240 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	4806      	ldr	r0, [pc, #24]	; (8003278 <BSP_SD_ReadBlocks+0x38>)
 800325e:	f7fe fba3 	bl	80019a8 <HAL_SD_ReadBlocks>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000028 	.word	0x20000028

0800327c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	4806      	ldr	r0, [pc, #24]	; (80032b4 <BSP_SD_WriteBlocks+0x38>)
 800329a:	f7fe fd6b 	bl	8001d74 <HAL_SD_WriteBlocks>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000028 	.word	0x20000028

080032b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <BSP_SD_GetCardState+0x1c>)
 80032be:	f7ff f8b7 	bl	8002430 <HAL_SD_GetCardState>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000028 	.word	0x20000028

080032d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4803      	ldr	r0, [pc, #12]	; (80032f0 <BSP_SD_GetCardInfo+0x18>)
 80032e4:	f7ff f878 	bl	80023d8 <HAL_SD_GetCardInfo>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000028 	.word	0x20000028

080032f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80032fa:	2301      	movs	r3, #1
 80032fc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	b2db      	uxtb	r3, r3
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <SD_CheckStatus+0x38>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003320:	f7ff ffca 	bl	80032b8 <BSP_SD_GetCardState>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <SD_CheckStatus+0x38>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <SD_CheckStatus+0x38>)
 8003338:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800333a:	4b03      	ldr	r3, [pc, #12]	; (8003348 <SD_CheckStatus+0x38>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000009 	.word	0x20000009

0800334c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <SD_initialize+0x38>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800335c:	f7ff ff58 	bl	8003210 <BSP_SD_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d107      	bne.n	8003376 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ffd1 	bl	8003310 <SD_CheckStatus>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SD_initialize+0x38>)
 8003374:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003376:	4b03      	ldr	r3, [pc, #12]	; (8003384 <SD_initialize+0x38>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000009 	.word	0x20000009

08003388 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ffbb 	bl	8003310 <SD_CheckStatus>
 800339a:	4603      	mov	r3, r0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f7ff ff3d 	bl	8003240 <BSP_SD_ReadBlocks>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d107      	bne.n	80033dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80033cc:	bf00      	nop
 80033ce:	f7ff ff73 	bl	80032b8 <BSP_SD_GetCardState>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1fa      	bne.n	80033ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4603      	mov	r3, r0
 80033f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68b8      	ldr	r0, [r7, #8]
 8003404:	f7ff ff3a 	bl	800327c <BSP_SD_WriteBlocks>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800340e:	bf00      	nop
 8003410:	f7ff ff52 	bl	80032b8 <BSP_SD_GetCardState>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1fa      	bne.n	8003410 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	603a      	str	r2, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
 8003434:	460b      	mov	r3, r1
 8003436:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800343e:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <SD_ioctl+0xac>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SD_ioctl+0x28>
 800344c:	2303      	movs	r3, #3
 800344e:	e03c      	b.n	80034ca <SD_ioctl+0xa2>

  switch (cmd)
 8003450:	79bb      	ldrb	r3, [r7, #6]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d834      	bhi.n	80034c0 <SD_ioctl+0x98>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <SD_ioctl+0x34>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003475 	.word	0x08003475
 8003464:	0800348d 	.word	0x0800348d
 8003468:	080034a7 	.word	0x080034a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003472:	e028      	b.n	80034c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff2d 	bl	80032d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800348a:	e01c      	b.n	80034c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800348c:	f107 030c 	add.w	r3, r7, #12
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff21 	bl	80032d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	b29a      	uxth	r2, r3
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034a4:	e00f      	b.n	80034c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff ff14 	bl	80032d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	0a5a      	lsrs	r2, r3, #9
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80034be:	e002      	b.n	80034c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80034c0:	2304      	movs	r3, #4
 80034c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80034c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000009 	.word	0x20000009

080034d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	4a08      	ldr	r2, [pc, #32]	; (8003508 <disk_status+0x30>)
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	79fa      	ldrb	r2, [r7, #7]
 80034f0:	4905      	ldr	r1, [pc, #20]	; (8003508 <disk_status+0x30>)
 80034f2:	440a      	add	r2, r1
 80034f4:	7a12      	ldrb	r2, [r2, #8]
 80034f6:	4610      	mov	r0, r2
 80034f8:	4798      	blx	r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200000e0 	.word	0x200000e0

0800350c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <disk_initialize+0x4c>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d114      	bne.n	800354e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <disk_initialize+0x4c>)
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	79fa      	ldrb	r2, [r7, #7]
 8003532:	4909      	ldr	r1, [pc, #36]	; (8003558 <disk_initialize+0x4c>)
 8003534:	440a      	add	r2, r1
 8003536:	7a12      	ldrb	r2, [r2, #8]
 8003538:	4610      	mov	r0, r2
 800353a:	4798      	blx	r3
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	4a03      	ldr	r2, [pc, #12]	; (8003558 <disk_initialize+0x4c>)
 800354a:	2101      	movs	r1, #1
 800354c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200000e0 	.word	0x200000e0

0800355c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <disk_read+0x3c>)
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	689c      	ldr	r4, [r3, #8]
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	4a07      	ldr	r2, [pc, #28]	; (8003598 <disk_read+0x3c>)
 800357c:	4413      	add	r3, r2
 800357e:	7a18      	ldrb	r0, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	47a0      	blx	r4
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]
  return res;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
}
 800358e:	4618      	mov	r0, r3
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd90      	pop	{r4, r7, pc}
 8003596:	bf00      	nop
 8003598:	200000e0 	.word	0x200000e0

0800359c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <disk_write+0x3c>)
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	68dc      	ldr	r4, [r3, #12]
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <disk_write+0x3c>)
 80035bc:	4413      	add	r3, r2
 80035be:	7a18      	ldrb	r0, [r3, #8]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	47a0      	blx	r4
 80035c8:	4603      	mov	r3, r0
 80035ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd90      	pop	{r4, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200000e0 	.word	0x200000e0

080035dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	603a      	str	r2, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
 80035e8:	460b      	mov	r3, r1
 80035ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	4a09      	ldr	r2, [pc, #36]	; (8003614 <disk_ioctl+0x38>)
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	79fa      	ldrb	r2, [r7, #7]
 80035fa:	4906      	ldr	r1, [pc, #24]	; (8003614 <disk_ioctl+0x38>)
 80035fc:	440a      	add	r2, r1
 80035fe:	7a10      	ldrb	r0, [r2, #8]
 8003600:	79b9      	ldrb	r1, [r7, #6]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4798      	blx	r3
 8003606:	4603      	mov	r3, r0
 8003608:	73fb      	strb	r3, [r7, #15]
  return res;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200000e0 	.word	0x200000e0

08003618 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3301      	adds	r3, #1
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	b21a      	sxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b21b      	sxth	r3, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	b21b      	sxth	r3, r3
 8003638:	81fb      	strh	r3, [r7, #14]
	return rv;
 800363a:	89fb      	ldrh	r3, [r7, #14]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3303      	adds	r3, #3
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	3202      	adds	r2, #2
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	3201      	adds	r2, #1
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	1c53      	adds	r3, r2, #1
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1c59      	adds	r1, r3, #1
 8003740:	6179      	str	r1, [r7, #20]
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3b01      	subs	r3, #1
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f1      	bne.n	8003736 <mem_cpy+0x1a>
	}
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	617a      	str	r2, [r7, #20]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3b01      	subs	r3, #1
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f3      	bne.n	800376e <mem_set+0x10>
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	61fa      	str	r2, [r7, #28]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	4619      	mov	r1, r3
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	61ba      	str	r2, [r7, #24]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	1acb      	subs	r3, r1, r3
 80037c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <mem_cmp+0x40>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0eb      	beq.n	80037ac <mem_cmp+0x18>

	return r;
 80037d4:	697b      	ldr	r3, [r7, #20]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80037ec:	e002      	b.n	80037f4 <chk_chr+0x12>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3301      	adds	r3, #1
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <chk_chr+0x26>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	4293      	cmp	r3, r2
 8003806:	d1f2      	bne.n	80037ee <chk_chr+0xc>
	return *str;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	781b      	ldrb	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e029      	b.n	8003880 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800382c:	4a27      	ldr	r2, [pc, #156]	; (80038cc <chk_lock+0xb4>)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01d      	beq.n	8003876 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800383a:	4a24      	ldr	r2, [pc, #144]	; (80038cc <chk_lock+0xb4>)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	4413      	add	r3, r2
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d116      	bne.n	800387a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <chk_lock+0xb4>)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800385c:	429a      	cmp	r2, r3
 800385e:	d10c      	bne.n	800387a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003860:	4a1a      	ldr	r2, [pc, #104]	; (80038cc <chk_lock+0xb4>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	4413      	add	r3, r2
 8003868:	3308      	adds	r3, #8
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003870:	429a      	cmp	r2, r3
 8003872:	d102      	bne.n	800387a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003874:	e007      	b.n	8003886 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d9d2      	bls.n	800382c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d109      	bne.n	80038a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <chk_lock+0x80>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d101      	bne.n	800389c <chk_lock+0x84>
 8003898:	2300      	movs	r3, #0
 800389a:	e010      	b.n	80038be <chk_lock+0xa6>
 800389c:	2312      	movs	r3, #18
 800389e:	e00e      	b.n	80038be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d108      	bne.n	80038b8 <chk_lock+0xa0>
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <chk_lock+0xb4>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	4413      	add	r3, r2
 80038ae:	330c      	adds	r3, #12
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d101      	bne.n	80038bc <chk_lock+0xa4>
 80038b8:	2310      	movs	r3, #16
 80038ba:	e000      	b.n	80038be <chk_lock+0xa6>
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	200000c0 	.word	0x200000c0

080038d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	e002      	b.n	80038e2 <enq_lock+0x12>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d806      	bhi.n	80038f6 <enq_lock+0x26>
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <enq_lock+0x40>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4413      	add	r3, r2
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	200000c0 	.word	0x200000c0

08003914 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e01f      	b.n	8003964 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003924:	4a41      	ldr	r2, [pc, #260]	; (8003a2c <inc_lock+0x118>)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	4413      	add	r3, r2
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d113      	bne.n	800395e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003936:	4a3d      	ldr	r2, [pc, #244]	; (8003a2c <inc_lock+0x118>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003946:	429a      	cmp	r2, r3
 8003948:	d109      	bne.n	800395e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800394a:	4a38      	ldr	r2, [pc, #224]	; (8003a2c <inc_lock+0x118>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4413      	add	r3, r2
 8003952:	3308      	adds	r3, #8
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800395a:	429a      	cmp	r2, r3
 800395c:	d006      	beq.n	800396c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d9dc      	bls.n	8003924 <inc_lock+0x10>
 800396a:	e000      	b.n	800396e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800396c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b02      	cmp	r3, #2
 8003972:	d132      	bne.n	80039da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e002      	b.n	8003980 <inc_lock+0x6c>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d806      	bhi.n	8003994 <inc_lock+0x80>
 8003986:	4a29      	ldr	r2, [pc, #164]	; (8003a2c <inc_lock+0x118>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4413      	add	r3, r2
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f2      	bne.n	800397a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d101      	bne.n	800399e <inc_lock+0x8a>
 800399a:	2300      	movs	r3, #0
 800399c:	e040      	b.n	8003a20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4922      	ldr	r1, [pc, #136]	; (8003a2c <inc_lock+0x118>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	440b      	add	r3, r1
 80039aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	491e      	ldr	r1, [pc, #120]	; (8003a2c <inc_lock+0x118>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	440b      	add	r3, r1
 80039b8:	3304      	adds	r3, #4
 80039ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	491a      	ldr	r1, [pc, #104]	; (8003a2c <inc_lock+0x118>)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	440b      	add	r3, r1
 80039c8:	3308      	adds	r3, #8
 80039ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80039cc:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <inc_lock+0x118>)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	4413      	add	r3, r2
 80039d4:	330c      	adds	r3, #12
 80039d6:	2200      	movs	r2, #0
 80039d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <inc_lock+0xe0>
 80039e0:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <inc_lock+0x118>)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	330c      	adds	r3, #12
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <inc_lock+0xe0>
 80039f0:	2300      	movs	r3, #0
 80039f2:	e015      	b.n	8003a20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <inc_lock+0xf8>
 80039fa:	4a0c      	ldr	r2, [pc, #48]	; (8003a2c <inc_lock+0x118>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	330c      	adds	r3, #12
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	e001      	b.n	8003a10 <inc_lock+0xfc>
 8003a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a10:	4906      	ldr	r1, [pc, #24]	; (8003a2c <inc_lock+0x118>)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	440b      	add	r3, r1
 8003a18:	330c      	adds	r3, #12
 8003a1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3301      	adds	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	200000c0 	.word	0x200000c0

08003a30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d825      	bhi.n	8003a90 <dec_lock+0x60>
		n = Files[i].ctr;
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <dec_lock+0x74>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	4413      	add	r3, r2
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003a52:	89fb      	ldrh	r3, [r7, #14]
 8003a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a58:	d101      	bne.n	8003a5e <dec_lock+0x2e>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003a5e:	89fb      	ldrh	r3, [r7, #14]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <dec_lock+0x3a>
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a6a:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <dec_lock+0x74>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	4413      	add	r3, r2
 8003a72:	330c      	adds	r3, #12
 8003a74:	89fa      	ldrh	r2, [r7, #14]
 8003a76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003a78:	89fb      	ldrh	r3, [r7, #14]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <dec_lock+0x5a>
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <dec_lock+0x74>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4413      	add	r3, r2
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	737b      	strb	r3, [r7, #13]
 8003a8e:	e001      	b.n	8003a94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003a90:	2302      	movs	r3, #2
 8003a92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003a94:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	200000c0 	.word	0x200000c0

08003aa8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e010      	b.n	8003ad8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ab6:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <clear_lock+0x44>)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d105      	bne.n	8003ad2 <clear_lock+0x2a>
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <clear_lock+0x44>)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	4413      	add	r3, r2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d9eb      	bls.n	8003ab6 <clear_lock+0xe>
	}
}
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	200000c0 	.word	0x200000c0

08003af0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	78db      	ldrb	r3, [r3, #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d034      	beq.n	8003b6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7858      	ldrb	r0, [r3, #1]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003b14:	2301      	movs	r3, #1
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	f7ff fd40 	bl	800359c <disk_write>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e022      	b.n	8003b6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	1ad2      	subs	r2, r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d217      	bcs.n	8003b6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	789b      	ldrb	r3, [r3, #2]
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e010      	b.n	8003b68 <sync_window+0x78>
					wsect += fs->fsize;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7858      	ldrb	r0, [r3, #1]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	f7ff fd1d 	bl	800359c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d8eb      	bhi.n	8003b46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d01b      	beq.n	8003bc8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffad 	bl	8003af0 <sync_window>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d113      	bne.n	8003bc8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7858      	ldrb	r0, [r3, #1]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003baa:	2301      	movs	r3, #1
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	f7ff fcd5 	bl	800355c <disk_read>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff87 	bl	8003af0 <sync_window>
 8003be2:	4603      	mov	r3, r0
 8003be4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d159      	bne.n	8003ca0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d149      	bne.n	8003c88 <sync_fs+0xb4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	791b      	ldrb	r3, [r3, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d145      	bne.n	8003c88 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	899b      	ldrh	r3, [r3, #12]
 8003c06:	461a      	mov	r2, r3
 8003c08:	2100      	movs	r1, #0
 8003c0a:	f7ff fda8 	bl	800375e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3334      	adds	r3, #52	; 0x34
 8003c12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003c16:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fd37 	bl	800368e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3334      	adds	r3, #52	; 0x34
 8003c24:	4921      	ldr	r1, [pc, #132]	; (8003cac <sync_fs+0xd8>)
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fd4c 	bl	80036c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3334      	adds	r3, #52	; 0x34
 8003c30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c34:	491e      	ldr	r1, [pc, #120]	; (8003cb0 <sync_fs+0xdc>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fd44 	bl	80036c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3334      	adds	r3, #52	; 0x34
 8003c40:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f7ff fd3a 	bl	80036c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3334      	adds	r3, #52	; 0x34
 8003c54:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7ff fd30 	bl	80036c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7858      	ldrb	r0, [r3, #1]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f7ff fc8d 	bl	800359c <disk_write>
			fs->fsi_flag = 0;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fca3 	bl	80035dc <disk_ioctl>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <sync_fs+0xcc>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	41615252 	.word	0x41615252
 8003cb0:	61417272 	.word	0x61417272

08003cb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	3b02      	subs	r3, #2
 8003cc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	3b02      	subs	r3, #2
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d301      	bcc.n	8003cd4 <clust2sect+0x20>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e008      	b.n	8003ce6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	895b      	ldrh	r3, [r3, #10]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	fb03 f202 	mul.w	r2, r3, r2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4413      	add	r3, r2
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d904      	bls.n	8003d12 <get_fat+0x20>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e0bb      	b.n	8003e90 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	f000 8083 	beq.w	8003e2e <get_fat+0x13c>
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	f300 80a7 	bgt.w	8003e7c <get_fat+0x18a>
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d002      	beq.n	8003d38 <get_fat+0x46>
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d056      	beq.n	8003de4 <get_fat+0xf2>
 8003d36:	e0a1      	b.n	8003e7c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	899b      	ldrh	r3, [r3, #12]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d56:	4413      	add	r3, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6938      	ldr	r0, [r7, #16]
 8003d5c:	f7ff ff0c 	bl	8003b78 <move_window>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 808d 	bne.w	8003e82 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	60fa      	str	r2, [r7, #12]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	8992      	ldrh	r2, [r2, #12]
 8003d72:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d76:	fb01 f202 	mul.w	r2, r1, r2
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	899b      	ldrh	r3, [r3, #12]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d96:	4413      	add	r3, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6938      	ldr	r0, [r7, #16]
 8003d9c:	f7ff feec 	bl	8003b78 <move_window>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d16f      	bne.n	8003e86 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	899b      	ldrh	r3, [r3, #12]
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	fbb3 f1f2 	udiv	r1, r3, r2
 8003db2:	fb01 f202 	mul.w	r2, r1, r2
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <get_fat+0xe8>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	e002      	b.n	8003de0 <get_fat+0xee>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	617b      	str	r3, [r7, #20]
			break;
 8003de2:	e055      	b.n	8003e90 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	899b      	ldrh	r3, [r3, #12]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003df8:	4413      	add	r3, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6938      	ldr	r0, [r7, #16]
 8003dfe:	f7ff febb 	bl	8003b78 <move_window>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d140      	bne.n	8003e8a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	8992      	ldrh	r2, [r2, #12]
 8003e16:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e1a:	fb00 f202 	mul.w	r2, r0, r2
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fbf8 	bl	8003618 <ld_word>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	617b      	str	r3, [r7, #20]
			break;
 8003e2c:	e030      	b.n	8003e90 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	899b      	ldrh	r3, [r3, #12]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e42:	4413      	add	r3, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	6938      	ldr	r0, [r7, #16]
 8003e48:	f7ff fe96 	bl	8003b78 <move_window>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11d      	bne.n	8003e8e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	8992      	ldrh	r2, [r2, #12]
 8003e60:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e64:	fb00 f202 	mul.w	r2, r0, r2
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fbeb 	bl	8003648 <ld_dword>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e78:	617b      	str	r3, [r7, #20]
			break;
 8003e7a:	e009      	b.n	8003e90 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e006      	b.n	8003e90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e82:	bf00      	nop
 8003e84:	e004      	b.n	8003e90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e8e:	bf00      	nop
		}
	}

	return val;
 8003e90:	697b      	ldr	r3, [r7, #20]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003e9a:	b590      	push	{r4, r7, lr}
 8003e9c:	b089      	sub	sp, #36	; 0x24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f240 8109 	bls.w	80040c4 <put_fat+0x22a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	f080 8103 	bcs.w	80040c4 <put_fat+0x22a>
		switch (fs->fs_type) {
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	f000 80b6 	beq.w	8004034 <put_fat+0x19a>
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	f300 80fb 	bgt.w	80040c4 <put_fat+0x22a>
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d003      	beq.n	8003eda <put_fat+0x40>
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	f000 8083 	beq.w	8003fde <put_fat+0x144>
 8003ed8:	e0f4      	b.n	80040c4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	899b      	ldrh	r3, [r3, #12]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ef8:	4413      	add	r3, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff fe3b 	bl	8003b78 <move_window>
 8003f02:	4603      	mov	r3, r0
 8003f04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 80d4 	bne.w	80040b6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	61ba      	str	r2, [r7, #24]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	8992      	ldrh	r2, [r2, #12]
 8003f1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f22:	fb00 f202 	mul.w	r2, r0, r2
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	440b      	add	r3, r1
 8003f2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <put_fat+0xb8>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	b25b      	sxtb	r3, r3
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	b25a      	sxtb	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e001      	b.n	8003f56 <put_fat+0xbc>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	899b      	ldrh	r3, [r3, #12]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f70:	4413      	add	r3, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff fdff 	bl	8003b78 <move_window>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f040 809a 	bne.w	80040ba <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	899b      	ldrh	r3, [r3, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f98:	fb00 f202 	mul.w	r2, r0, r2
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <put_fat+0x11a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e00e      	b.n	8003fd2 <put_fat+0x138>
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	f023 030f 	bic.w	r3, r3, #15
 8003fbe:	b25a      	sxtb	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	b25b      	sxtb	r3, r3
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	70da      	strb	r2, [r3, #3]
			break;
 8003fdc:	e072      	b.n	80040c4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	899b      	ldrh	r3, [r3, #12]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	4619      	mov	r1, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fdbe 	bl	8003b78 <move_window>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004000:	7ffb      	ldrb	r3, [r7, #31]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d15b      	bne.n	80040be <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	8992      	ldrh	r2, [r2, #12]
 8004014:	fbb3 f0f2 	udiv	r0, r3, r2
 8004018:	fb00 f202 	mul.w	r2, r0, r2
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	440b      	add	r3, r1
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	b292      	uxth	r2, r2
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fb31 	bl	800368e <st_word>
			fs->wflag = 1;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	70da      	strb	r2, [r3, #3]
			break;
 8004032:	e047      	b.n	80040c4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	899b      	ldrh	r3, [r3, #12]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	b29b      	uxth	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	fbb3 f3f1 	udiv	r3, r3, r1
 8004048:	4413      	add	r3, r2
 800404a:	4619      	mov	r1, r3
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff fd93 	bl	8003b78 <move_window>
 8004052:	4603      	mov	r3, r0
 8004054:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d132      	bne.n	80040c2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	8992      	ldrh	r2, [r2, #12]
 8004070:	fbb3 f0f2 	udiv	r0, r3, r2
 8004074:	fb00 f202 	mul.w	r2, r0, r2
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	440b      	add	r3, r1
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fae3 	bl	8003648 <ld_dword>
 8004082:	4603      	mov	r3, r0
 8004084:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004088:	4323      	orrs	r3, r4
 800408a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	8992      	ldrh	r2, [r2, #12]
 800409a:	fbb3 f0f2 	udiv	r0, r3, r2
 800409e:	fb00 f202 	mul.w	r2, r0, r2
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fb0b 	bl	80036c4 <st_dword>
			fs->wflag = 1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	70da      	strb	r2, [r3, #3]
			break;
 80040b4:	e006      	b.n	80040c4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040c2:	bf00      	nop
		}
	}
	return res;
 80040c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}

080040ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b088      	sub	sp, #32
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d904      	bls.n	80040f4 <remove_chain+0x26>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d301      	bcc.n	80040f8 <remove_chain+0x2a>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e04b      	b.n	8004190 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	69b8      	ldr	r0, [r7, #24]
 8004106:	f7ff fec8 	bl	8003e9a <put_fat>
 800410a:	4603      	mov	r3, r0
 800410c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <remove_chain+0x4a>
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	e03b      	b.n	8004190 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fde9 	bl	8003cf2 <get_fat>
 8004120:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d031      	beq.n	800418c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <remove_chain+0x64>
 800412e:	2302      	movs	r3, #2
 8004130:	e02e      	b.n	8004190 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d101      	bne.n	800413e <remove_chain+0x70>
 800413a:	2301      	movs	r3, #1
 800413c:	e028      	b.n	8004190 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800413e:	2200      	movs	r2, #0
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	69b8      	ldr	r0, [r7, #24]
 8004144:	f7ff fea9 	bl	8003e9a <put_fat>
 8004148:	4603      	mov	r3, r0
 800414a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <remove_chain+0x88>
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	e01c      	b.n	8004190 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	3b02      	subs	r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d20b      	bcs.n	800417c <remove_chain+0xae>
			fs->free_clst++;
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3c6      	bcc.n	8004118 <remove_chain+0x4a>
 800418a:	e000      	b.n	800418e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800418c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <create_chain+0x2c>
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d31b      	bcc.n	80041fc <create_chain+0x64>
 80041c4:	2301      	movs	r3, #1
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e018      	b.n	80041fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80041ca:	6839      	ldr	r1, [r7, #0]
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fd90 	bl	8003cf2 <get_fat>
 80041d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d801      	bhi.n	80041de <create_chain+0x46>
 80041da:	2301      	movs	r3, #1
 80041dc:	e070      	b.n	80042c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d101      	bne.n	80041ea <create_chain+0x52>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	e06a      	b.n	80042c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d201      	bcs.n	80041f8 <create_chain+0x60>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e063      	b.n	80042c0 <create_chain+0x128>
		scl = clst;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	3301      	adds	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	429a      	cmp	r2, r3
 800420e:	d307      	bcc.n	8004220 <create_chain+0x88>
				ncl = 2;
 8004210:	2302      	movs	r3, #2
 8004212:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d901      	bls.n	8004220 <create_chain+0x88>
 800421c:	2300      	movs	r3, #0
 800421e:	e04f      	b.n	80042c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fd65 	bl	8003cf2 <get_fat>
 8004228:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d003      	beq.n	800423e <create_chain+0xa6>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d101      	bne.n	8004242 <create_chain+0xaa>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e03e      	b.n	80042c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	429a      	cmp	r2, r3
 8004248:	d1da      	bne.n	8004200 <create_chain+0x68>
 800424a:	2300      	movs	r3, #0
 800424c:	e038      	b.n	80042c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800424e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	6938      	ldr	r0, [r7, #16]
 8004258:	f7ff fe1f 	bl	8003e9a <put_fat>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <create_chain+0xe2>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d006      	beq.n	800427a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	6938      	ldr	r0, [r7, #16]
 8004272:	f7ff fe12 	bl	8003e9a <put_fat>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d116      	bne.n	80042ae <create_chain+0x116>
		fs->last_clst = ncl;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	3b02      	subs	r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d804      	bhi.n	800429e <create_chain+0x106>
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	1e5a      	subs	r2, r3, #1
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	791b      	ldrb	r3, [r3, #4]
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	711a      	strb	r2, [r3, #4]
 80042ac:	e007      	b.n	80042be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <create_chain+0x122>
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	e000      	b.n	80042bc <create_chain+0x124>
 80042ba:	2301      	movs	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80042be:	69fb      	ldr	r3, [r7, #28]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	3304      	adds	r3, #4
 80042de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	899b      	ldrh	r3, [r3, #12]
 80042e4:	461a      	mov	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	8952      	ldrh	r2, [r2, #10]
 80042f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	613a      	str	r2, [r7, #16]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <clmt_clust+0x42>
 8004306:	2300      	movs	r3, #0
 8004308:	e010      	b.n	800432c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	429a      	cmp	r2, r3
 8004310:	d307      	bcc.n	8004322 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3304      	adds	r3, #4
 800431e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004320:	e7e9      	b.n	80042f6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004322:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	4413      	add	r3, r2
}
 800432c:	4618      	mov	r0, r3
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434e:	d204      	bcs.n	800435a <dir_sdi+0x22>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <dir_sdi+0x26>
		return FR_INT_ERR;
 800435a:	2302      	movs	r3, #2
 800435c:	e071      	b.n	8004442 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <dir_sdi+0x46>
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d902      	bls.n	800437e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10c      	bne.n	800439e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	8912      	ldrh	r2, [r2, #8]
 800438c:	4293      	cmp	r3, r2
 800438e:	d301      	bcc.n	8004394 <dir_sdi+0x5c>
 8004390:	2302      	movs	r3, #2
 8004392:	e056      	b.n	8004442 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	61da      	str	r2, [r3, #28]
 800439c:	e02d      	b.n	80043fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	895b      	ldrh	r3, [r3, #10]
 80043a2:	461a      	mov	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	899b      	ldrh	r3, [r3, #12]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80043ae:	e019      	b.n	80043e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fc9c 	bl	8003cf2 <get_fat>
 80043ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d101      	bne.n	80043c8 <dir_sdi+0x90>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e03c      	b.n	8004442 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d904      	bls.n	80043d8 <dir_sdi+0xa0>
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d301      	bcc.n	80043dc <dir_sdi+0xa4>
 80043d8:	2302      	movs	r3, #2
 80043da:	e032      	b.n	8004442 <dir_sdi+0x10a>
			ofs -= csz;
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d2e1      	bcs.n	80043b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f7ff fc60 	bl	8003cb4 <clust2sect>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <dir_sdi+0xd4>
 8004408:	2302      	movs	r3, #2
 800440a:	e01a      	b.n	8004442 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	899b      	ldrh	r3, [r3, #12]
 8004414:	4619      	mov	r1, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	fbb3 f3f1 	udiv	r3, r3, r1
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	899b      	ldrh	r3, [r3, #12]
 800442c:	461a      	mov	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	fbb3 f0f2 	udiv	r0, r3, r2
 8004434:	fb00 f202 	mul.w	r2, r0, r2
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	18ca      	adds	r2, r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	3320      	adds	r3, #32
 8004460:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <dir_next+0x28>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004470:	d301      	bcc.n	8004476 <dir_next+0x2c>
 8004472:	2304      	movs	r3, #4
 8004474:	e0bb      	b.n	80045ee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	899b      	ldrh	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004482:	fb01 f202 	mul.w	r2, r1, r2
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	2b00      	cmp	r3, #0
 800448a:	f040 809d 	bne.w	80045c8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	8912      	ldrh	r2, [r2, #8]
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f0c0 808d 	bcc.w	80045c8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	61da      	str	r2, [r3, #28]
 80044b4:	2304      	movs	r3, #4
 80044b6:	e09a      	b.n	80045ee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	899b      	ldrh	r3, [r3, #12]
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	8952      	ldrh	r2, [r2, #10]
 80044c8:	3a01      	subs	r2, #1
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d17b      	bne.n	80045c8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f7ff fc0a 	bl	8003cf2 <get_fat>
 80044de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d801      	bhi.n	80044ea <dir_next+0xa0>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e081      	b.n	80045ee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d101      	bne.n	80044f6 <dir_next+0xac>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07b      	b.n	80045ee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d359      	bcc.n	80045b4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d104      	bne.n	8004510 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	61da      	str	r2, [r3, #28]
 800450c:	2304      	movs	r3, #4
 800450e:	e06e      	b.n	80045ee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7ff fe3d 	bl	8004198 <create_chain>
 800451e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <dir_next+0xe0>
 8004526:	2307      	movs	r3, #7
 8004528:	e061      	b.n	80045ee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <dir_next+0xea>
 8004530:	2302      	movs	r3, #2
 8004532:	e05c      	b.n	80045ee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d101      	bne.n	8004540 <dir_next+0xf6>
 800453c:	2301      	movs	r3, #1
 800453e:	e056      	b.n	80045ee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff fad5 	bl	8003af0 <sync_window>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <dir_next+0x106>
 800454c:	2301      	movs	r3, #1
 800454e:	e04e      	b.n	80045ee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	899b      	ldrh	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	2100      	movs	r1, #0
 800455e:	f7ff f8fe 	bl	800375e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	6979      	ldr	r1, [r7, #20]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7ff fba3 	bl	8003cb4 <clust2sect>
 800456e:	4602      	mov	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
 8004574:	e012      	b.n	800459c <dir_next+0x152>
						fs->wflag = 1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff fab7 	bl	8003af0 <sync_window>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <dir_next+0x142>
 8004588:	2301      	movs	r3, #1
 800458a:	e030      	b.n	80045ee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3301      	adds	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	895b      	ldrh	r3, [r3, #10]
 80045a0:	461a      	mov	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d3e6      	bcc.n	8004576 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7ff fb79 	bl	8003cb4 <clust2sect>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	899b      	ldrh	r3, [r3, #12]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80045e0:	fb00 f202 	mul.w	r2, r0, r2
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	18ca      	adds	r2, r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fe95 	bl	8004338 <dir_sdi>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d12b      	bne.n	8004670 <dir_alloc+0x7a>
		n = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	4619      	mov	r1, r3
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff faa8 	bl	8003b78 <move_window>
 8004628:	4603      	mov	r3, r0
 800462a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11d      	bne.n	800466e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2be5      	cmp	r3, #229	; 0xe5
 800463a:	d004      	beq.n	8004646 <dir_alloc+0x50>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3301      	adds	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d102      	bne.n	800465a <dir_alloc+0x64>
 8004654:	e00c      	b.n	8004670 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800465a:	2101      	movs	r1, #1
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fef4 	bl	800444a <dir_next>
 8004662:	4603      	mov	r3, r0
 8004664:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0d7      	beq.n	800461c <dir_alloc+0x26>
 800466c:	e000      	b.n	8004670 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800466e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d101      	bne.n	800467a <dir_alloc+0x84>
 8004676:	2307      	movs	r3, #7
 8004678:	75fb      	strb	r3, [r7, #23]
	return res;
 800467a:	7dfb      	ldrb	r3, [r7, #23]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	331a      	adds	r3, #26
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe ffc0 	bl	8003618 <ld_word>
 8004698:	4603      	mov	r3, r0
 800469a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d109      	bne.n	80046b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe ffb5 	bl	8003618 <ld_word>
 80046ae:	4603      	mov	r3, r0
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	331a      	adds	r3, #26
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	b292      	uxth	r2, r2
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe ffd8 	bl	800368e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d109      	bne.n	80046fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f103 0214 	add.w	r2, r3, #20
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fe ffca 	bl	800368e <st_word>
	}
}
 80046fa:	bf00      	nop
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004710:	2100      	movs	r1, #0
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff fe10 	bl	8004338 <dir_sdi>
 8004718:	4603      	mov	r3, r0
 800471a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <dir_find+0x24>
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	e03e      	b.n	80047a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	4619      	mov	r1, r3
 800472c:	6938      	ldr	r0, [r7, #16]
 800472e:	f7ff fa23 	bl	8003b78 <move_window>
 8004732:	4603      	mov	r3, r0
 8004734:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004736:	7dfb      	ldrb	r3, [r7, #23]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d12f      	bne.n	800479c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <dir_find+0x4e>
 800474a:	2304      	movs	r3, #4
 800474c:	75fb      	strb	r3, [r7, #23]
 800474e:	e028      	b.n	80047a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	330b      	adds	r3, #11
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	330b      	adds	r3, #11
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <dir_find+0x86>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a18      	ldr	r0, [r3, #32]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	220b      	movs	r2, #11
 800477c:	4619      	mov	r1, r3
 800477e:	f7ff f809 	bl	8003794 <mem_cmp>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004788:	2100      	movs	r1, #0
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe5d 	bl	800444a <dir_next>
 8004790:	4603      	mov	r3, r0
 8004792:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0c5      	beq.n	8004726 <dir_find+0x24>
 800479a:	e002      	b.n	80047a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80047a0:	bf00      	nop

	return res;
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80047ba:	2101      	movs	r1, #1
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff1a 	bl	80045f6 <dir_alloc>
 80047c2:	4603      	mov	r3, r0
 80047c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11c      	bne.n	8004806 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4619      	mov	r1, r3
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f7ff f9d0 	bl	8003b78 <move_window>
 80047d8:	4603      	mov	r3, r0
 80047da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d111      	bne.n	8004806 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	2220      	movs	r2, #32
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ffb7 	bl	800375e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a18      	ldr	r0, [r3, #32]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3324      	adds	r3, #36	; 0x24
 80047f8:	220b      	movs	r2, #11
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fe ff8e 	bl	800371c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2201      	movs	r2, #1
 8004804:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3324      	adds	r3, #36	; 0x24
 8004824:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004826:	220b      	movs	r2, #11
 8004828:	2120      	movs	r1, #32
 800482a:	68b8      	ldr	r0, [r7, #8]
 800482c:	f7fe ff97 	bl	800375e <mem_set>
	si = i = 0; ni = 8;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	2308      	movs	r3, #8
 800483a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	61fa      	str	r2, [r7, #28]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800484a:	7efb      	ldrb	r3, [r7, #27]
 800484c:	2b20      	cmp	r3, #32
 800484e:	d94e      	bls.n	80048ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004850:	7efb      	ldrb	r3, [r7, #27]
 8004852:	2b2f      	cmp	r3, #47	; 0x2f
 8004854:	d006      	beq.n	8004864 <create_name+0x54>
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	2b5c      	cmp	r3, #92	; 0x5c
 800485a:	d110      	bne.n	800487e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800485c:	e002      	b.n	8004864 <create_name+0x54>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b2f      	cmp	r3, #47	; 0x2f
 800486e:	d0f6      	beq.n	800485e <create_name+0x4e>
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	4413      	add	r3, r2
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b5c      	cmp	r3, #92	; 0x5c
 800487a:	d0f0      	beq.n	800485e <create_name+0x4e>
			break;
 800487c:	e038      	b.n	80048f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800487e:	7efb      	ldrb	r3, [r7, #27]
 8004880:	2b2e      	cmp	r3, #46	; 0x2e
 8004882:	d003      	beq.n	800488c <create_name+0x7c>
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	429a      	cmp	r2, r3
 800488a:	d30c      	bcc.n	80048a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b0b      	cmp	r3, #11
 8004890:	d002      	beq.n	8004898 <create_name+0x88>
 8004892:	7efb      	ldrb	r3, [r7, #27]
 8004894:	2b2e      	cmp	r3, #46	; 0x2e
 8004896:	d001      	beq.n	800489c <create_name+0x8c>
 8004898:	2306      	movs	r3, #6
 800489a:	e044      	b.n	8004926 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800489c:	2308      	movs	r3, #8
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	230b      	movs	r3, #11
 80048a2:	617b      	str	r3, [r7, #20]
			continue;
 80048a4:	e022      	b.n	80048ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80048a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	da04      	bge.n	80048b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80048ae:	7efb      	ldrb	r3, [r7, #27]
 80048b0:	3b80      	subs	r3, #128	; 0x80
 80048b2:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <create_name+0x120>)
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80048b8:	7efb      	ldrb	r3, [r7, #27]
 80048ba:	4619      	mov	r1, r3
 80048bc:	481d      	ldr	r0, [pc, #116]	; (8004934 <create_name+0x124>)
 80048be:	f7fe ff90 	bl	80037e2 <chk_chr>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <create_name+0xbc>
 80048c8:	2306      	movs	r3, #6
 80048ca:	e02c      	b.n	8004926 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80048cc:	7efb      	ldrb	r3, [r7, #27]
 80048ce:	2b60      	cmp	r3, #96	; 0x60
 80048d0:	d905      	bls.n	80048de <create_name+0xce>
 80048d2:	7efb      	ldrb	r3, [r7, #27]
 80048d4:	2b7a      	cmp	r3, #122	; 0x7a
 80048d6:	d802      	bhi.n	80048de <create_name+0xce>
 80048d8:	7efb      	ldrb	r3, [r7, #27]
 80048da:	3b20      	subs	r3, #32
 80048dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	613a      	str	r2, [r7, #16]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	4413      	add	r3, r2
 80048e8:	7efa      	ldrb	r2, [r7, #27]
 80048ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80048ec:	e7a6      	b.n	800483c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80048ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	441a      	add	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <create_name+0xf4>
 8004900:	2306      	movs	r3, #6
 8004902:	e010      	b.n	8004926 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2be5      	cmp	r3, #229	; 0xe5
 800490a:	d102      	bne.n	8004912 <create_name+0x102>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2205      	movs	r2, #5
 8004910:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004912:	7efb      	ldrb	r3, [r7, #27]
 8004914:	2b20      	cmp	r3, #32
 8004916:	d801      	bhi.n	800491c <create_name+0x10c>
 8004918:	2204      	movs	r2, #4
 800491a:	e000      	b.n	800491e <create_name+0x10e>
 800491c:	2200      	movs	r2, #0
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	330b      	adds	r3, #11
 8004922:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004924:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	08005b5c 	.word	0x08005b5c
 8004934:	08005af4 	.word	0x08005af4

08004938 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800494c:	e002      	b.n	8004954 <follow_path+0x1c>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	3301      	adds	r3, #1
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b2f      	cmp	r3, #47	; 0x2f
 800495a:	d0f8      	beq.n	800494e <follow_path+0x16>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b5c      	cmp	r3, #92	; 0x5c
 8004962:	d0f4      	beq.n	800494e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b1f      	cmp	r3, #31
 8004970:	d80a      	bhi.n	8004988 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800497a:	2100      	movs	r1, #0
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fcdb 	bl	8004338 <dir_sdi>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
 8004986:	e048      	b.n	8004a1a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004988:	463b      	mov	r3, r7
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff3f 	bl	8004810 <create_name>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004996:	7dfb      	ldrb	r3, [r7, #23]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d139      	bne.n	8004a10 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff feb0 	bl	8004702 <dir_find>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80049ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d12c      	bne.n	8004a14 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80049ba:	7afb      	ldrb	r3, [r7, #11]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d127      	bne.n	8004a14 <follow_path+0xdc>
 80049c4:	2305      	movs	r3, #5
 80049c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80049c8:	e024      	b.n	8004a14 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d121      	bne.n	8004a18 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	799b      	ldrb	r3, [r3, #6]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80049e0:	2305      	movs	r3, #5
 80049e2:	75fb      	strb	r3, [r7, #23]
 80049e4:	e019      	b.n	8004a1a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	8992      	ldrh	r2, [r2, #12]
 80049f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80049f8:	fb00 f202 	mul.w	r2, r0, r2
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	440b      	add	r3, r1
 8004a00:	4619      	mov	r1, r3
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff fe3e 	bl	8004684 <ld_clust>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004a0e:	e7bb      	b.n	8004988 <follow_path+0x50>
			if (res != FR_OK) break;
 8004a10:	bf00      	nop
 8004a12:	e002      	b.n	8004a1a <follow_path+0xe2>
				break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004a18:	bf00      	nop
			}
		}
	}

	return res;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d031      	beq.n	8004a9e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e002      	b.n	8004a48 <get_ldnumber+0x24>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3301      	adds	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d903      	bls.n	8004a58 <get_ldnumber+0x34>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b3a      	cmp	r3, #58	; 0x3a
 8004a56:	d1f4      	bne.n	8004a42 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b3a      	cmp	r3, #58	; 0x3a
 8004a5e:	d11c      	bne.n	8004a9a <get_ldnumber+0x76>
			tp = *path;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	60fa      	str	r2, [r7, #12]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	3b30      	subs	r3, #48	; 0x30
 8004a70:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b09      	cmp	r3, #9
 8004a76:	d80e      	bhi.n	8004a96 <get_ldnumber+0x72>
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d10a      	bne.n	8004a96 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d107      	bne.n	8004a96 <get_ldnumber+0x72>
					vol = (int)i;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	e002      	b.n	8004aa0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004a9e:	693b      	ldr	r3, [r7, #16]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	70da      	strb	r2, [r3, #3]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff f856 	bl	8003b78 <move_window>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <check_fs+0x2a>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e038      	b.n	8004b48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3334      	adds	r3, #52	; 0x34
 8004ada:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fd9a 	bl	8003618 <ld_word>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <check_fs+0x48>
 8004af0:	2303      	movs	r3, #3
 8004af2:	e029      	b.n	8004b48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004afa:	2be9      	cmp	r3, #233	; 0xe9
 8004afc:	d009      	beq.n	8004b12 <check_fs+0x66>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b04:	2beb      	cmp	r3, #235	; 0xeb
 8004b06:	d11e      	bne.n	8004b46 <check_fs+0x9a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004b0e:	2b90      	cmp	r3, #144	; 0x90
 8004b10:	d119      	bne.n	8004b46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3334      	adds	r3, #52	; 0x34
 8004b16:	3336      	adds	r3, #54	; 0x36
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fd95 	bl	8003648 <ld_dword>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <check_fs+0xa4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <check_fs+0x82>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e00c      	b.n	8004b48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3334      	adds	r3, #52	; 0x34
 8004b32:	3352      	adds	r3, #82	; 0x52
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fe fd87 	bl	8003648 <ld_dword>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <check_fs+0xa8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <check_fs+0x9a>
 8004b42:	2300      	movs	r3, #0
 8004b44:	e000      	b.n	8004b48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004b46:	2302      	movs	r3, #2
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	00544146 	.word	0x00544146
 8004b54:	33544146 	.word	0x33544146

08004b58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b096      	sub	sp, #88	; 0x58
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7ff ff59 	bl	8004a24 <get_ldnumber>
 8004b72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da01      	bge.n	8004b7e <find_volume+0x26>
 8004b7a:	230b      	movs	r3, #11
 8004b7c:	e262      	b.n	8005044 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004b7e:	4a9f      	ldr	r2, [pc, #636]	; (8004dfc <find_volume+0x2a4>)
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <find_volume+0x3a>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	e258      	b.n	8005044 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01a      	beq.n	8004bde <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fc93 	bl	80034d8 <disk_status>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <find_volume+0x82>
 8004bca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004bd6:	230a      	movs	r3, #10
 8004bd8:	e234      	b.n	8005044 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e232      	b.n	8005044 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fc8b 	bl	800350c <disk_initialize>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004bfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e21b      	b.n	8005044 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <find_volume+0xca>
 8004c12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004c1e:	230a      	movs	r3, #10
 8004c20:	e210      	b.n	8005044 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	7858      	ldrb	r0, [r3, #1]
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	330c      	adds	r3, #12
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	f7fe fcd5 	bl	80035dc <disk_ioctl>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <find_volume+0xe4>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e203      	b.n	8005044 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3e:	899b      	ldrh	r3, [r3, #12]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c44:	d80d      	bhi.n	8004c62 <find_volume+0x10a>
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	899b      	ldrh	r3, [r3, #12]
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4e:	d308      	bcc.n	8004c62 <find_volume+0x10a>
 8004c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c52:	899b      	ldrh	r3, [r3, #12]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	899b      	ldrh	r3, [r3, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <find_volume+0x10e>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e1ee      	b.n	8005044 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004c6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c6e:	f7ff ff1d 	bl	8004aac <check_fs>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004c78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d149      	bne.n	8004d14 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c80:	2300      	movs	r3, #0
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40
 8004c84:	e01e      	b.n	8004cc4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004c94:	4413      	add	r3, r2
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <find_volume+0x158>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fcce 	bl	8003648 <ld_dword>
 8004cac:	4602      	mov	r2, r0
 8004cae:	e000      	b.n	8004cb2 <find_volume+0x15a>
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	3358      	adds	r3, #88	; 0x58
 8004cb8:	443b      	add	r3, r7
 8004cba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d9dd      	bls.n	8004c86 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004cca:	2300      	movs	r3, #0
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <find_volume+0x182>
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	3358      	adds	r3, #88	; 0x58
 8004ce0:	443b      	add	r3, r7
 8004ce2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004ce6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <find_volume+0x1a2>
 8004cee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cf2:	f7ff fedb 	bl	8004aac <check_fs>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	e000      	b.n	8004cfc <find_volume+0x1a4>
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004d00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d905      	bls.n	8004d14 <find_volume+0x1bc>
 8004d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d9e2      	bls.n	8004cda <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d101      	bne.n	8004d20 <find_volume+0x1c8>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e191      	b.n	8005044 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d901      	bls.n	8004d2c <find_volume+0x1d4>
 8004d28:	230d      	movs	r3, #13
 8004d2a:	e18b      	b.n	8005044 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	3334      	adds	r3, #52	; 0x34
 8004d30:	330b      	adds	r3, #11
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fc70 	bl	8003618 <ld_word>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	899b      	ldrh	r3, [r3, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <find_volume+0x1f0>
 8004d44:	230d      	movs	r3, #13
 8004d46:	e17d      	b.n	8005044 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	3334      	adds	r3, #52	; 0x34
 8004d4c:	3316      	adds	r3, #22
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fc62 	bl	8003618 <ld_word>
 8004d54:	4603      	mov	r3, r0
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <find_volume+0x214>
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	3334      	adds	r3, #52	; 0x34
 8004d62:	3324      	adds	r3, #36	; 0x24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe fc6f 	bl	8003648 <ld_dword>
 8004d6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d70:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	789b      	ldrb	r3, [r3, #2]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d005      	beq.n	8004d90 <find_volume+0x238>
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	789b      	ldrb	r3, [r3, #2]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d001      	beq.n	8004d90 <find_volume+0x238>
 8004d8c:	230d      	movs	r3, #13
 8004d8e:	e159      	b.n	8005044 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	789b      	ldrb	r3, [r3, #2]
 8004d94:	461a      	mov	r2, r3
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	895b      	ldrh	r3, [r3, #10]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <find_volume+0x26c>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	895b      	ldrh	r3, [r3, #10]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	895b      	ldrh	r3, [r3, #10]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <find_volume+0x270>
 8004dc4:	230d      	movs	r3, #13
 8004dc6:	e13d      	b.n	8005044 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	3334      	adds	r3, #52	; 0x34
 8004dcc:	3311      	adds	r3, #17
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc22 	bl	8003618 <ld_word>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	891b      	ldrh	r3, [r3, #8]
 8004de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de2:	8992      	ldrh	r2, [r2, #12]
 8004de4:	0952      	lsrs	r2, r2, #5
 8004de6:	b292      	uxth	r2, r2
 8004de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dec:	fb01 f202 	mul.w	r2, r1, r2
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <find_volume+0x2a8>
 8004df8:	230d      	movs	r3, #13
 8004dfa:	e123      	b.n	8005044 <find_volume+0x4ec>
 8004dfc:	200000b8 	.word	0x200000b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	3334      	adds	r3, #52	; 0x34
 8004e04:	3313      	adds	r3, #19
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fc06 	bl	8003618 <ld_word>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <find_volume+0x2cc>
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	3334      	adds	r3, #52	; 0x34
 8004e1a:	3320      	adds	r3, #32
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe fc13 	bl	8003648 <ld_dword>
 8004e22:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	3334      	adds	r3, #52	; 0x34
 8004e28:	330e      	adds	r3, #14
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fe fbf4 	bl	8003618 <ld_word>
 8004e30:	4603      	mov	r3, r0
 8004e32:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <find_volume+0x2e6>
 8004e3a:	230d      	movs	r3, #13
 8004e3c:	e102      	b.n	8005044 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004e3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e42:	4413      	add	r3, r2
 8004e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e46:	8911      	ldrh	r1, [r2, #8]
 8004e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4a:	8992      	ldrh	r2, [r2, #12]
 8004e4c:	0952      	lsrs	r2, r2, #5
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	fbb1 f2f2 	udiv	r2, r1, r2
 8004e54:	b292      	uxth	r2, r2
 8004e56:	4413      	add	r3, r2
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d201      	bcs.n	8004e66 <find_volume+0x30e>
 8004e62:	230d      	movs	r3, #13
 8004e64:	e0ee      	b.n	8005044 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e6e:	8952      	ldrh	r2, [r2, #10]
 8004e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <find_volume+0x328>
 8004e7c:	230d      	movs	r3, #13
 8004e7e:	e0e1      	b.n	8005044 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8004e80:	2303      	movs	r3, #3
 8004e82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d802      	bhi.n	8004e96 <find_volume+0x33e>
 8004e90:	2302      	movs	r3, #2
 8004e92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d802      	bhi.n	8004ea6 <find_volume+0x34e>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eb2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004eb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb8:	441a      	add	r2, r3
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8004ebe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	441a      	add	r2, r3
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8004ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d11e      	bne.n	8004f0e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	3334      	adds	r3, #52	; 0x34
 8004ed4:	332a      	adds	r3, #42	; 0x2a
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fb9e 	bl	8003618 <ld_word>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <find_volume+0x38e>
 8004ee2:	230d      	movs	r3, #13
 8004ee4:	e0ae      	b.n	8005044 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	891b      	ldrh	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <find_volume+0x39a>
 8004eee:	230d      	movs	r3, #13
 8004ef0:	e0a8      	b.n	8005044 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	3334      	adds	r3, #52	; 0x34
 8004ef6:	332c      	adds	r3, #44	; 0x2c
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fba5 	bl	8003648 <ld_dword>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0c:	e01f      	b.n	8004f4e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	891b      	ldrh	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <find_volume+0x3c2>
 8004f16:	230d      	movs	r3, #13
 8004f18:	e094      	b.n	8005044 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	441a      	add	r2, r3
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004f26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d103      	bne.n	8004f36 <find_volume+0x3de>
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	e00a      	b.n	8004f4c <find_volume+0x3f4>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	085a      	lsrs	r2, r3, #1
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	69da      	ldr	r2, [r3, #28]
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	899b      	ldrh	r3, [r3, #12]
 8004f56:	4619      	mov	r1, r3
 8004f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f60:	8989      	ldrh	r1, [r1, #12]
 8004f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d201      	bcs.n	8004f6e <find_volume+0x416>
 8004f6a:	230d      	movs	r3, #13
 8004f6c:	e06a      	b.n	8005044 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	f04f 32ff 	mov.w	r2, #4294967295
 8004f74:	615a      	str	r2, [r3, #20]
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	2280      	movs	r2, #128	; 0x80
 8004f82:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d149      	bne.n	8005020 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	3334      	adds	r3, #52	; 0x34
 8004f90:	3330      	adds	r3, #48	; 0x30
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fb40 	bl	8003618 <ld_word>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d140      	bne.n	8005020 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fa6:	f7fe fde7 	bl	8003b78 <move_window>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d137      	bne.n	8005020 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	3334      	adds	r3, #52	; 0x34
 8004fba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe fb2a 	bl	8003618 <ld_word>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d127      	bne.n	8005020 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	3334      	adds	r3, #52	; 0x34
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fb37 	bl	8003648 <ld_dword>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <find_volume+0x4f4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d11e      	bne.n	8005020 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	3334      	adds	r3, #52	; 0x34
 8004fe6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fb2c 	bl	8003648 <ld_dword>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <find_volume+0x4f8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d113      	bne.n	8005020 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	3334      	adds	r3, #52	; 0x34
 8004ffc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fb21 	bl	8003648 <ld_dword>
 8005006:	4602      	mov	r2, r0
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	3334      	adds	r3, #52	; 0x34
 8005010:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fb17 	bl	8003648 <ld_dword>
 800501a:	4602      	mov	r2, r0
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005026:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <find_volume+0x4fc>)
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <find_volume+0x4fc>)
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <find_volume+0x4fc>)
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800503c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800503e:	f7fe fd33 	bl	8003aa8 <clear_lock>
#endif
	return FR_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3758      	adds	r7, #88	; 0x58
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	41615252 	.word	0x41615252
 8005050:	61417272 	.word	0x61417272
 8005054:	200000bc 	.word	0x200000bc

08005058 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005062:	2309      	movs	r3, #9
 8005064:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01c      	beq.n	80050a6 <validate+0x4e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d018      	beq.n	80050a6 <validate+0x4e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d013      	beq.n	80050a6 <validate+0x4e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	889a      	ldrh	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	88db      	ldrh	r3, [r3, #6]
 8005088:	429a      	cmp	r2, r3
 800508a:	d10c      	bne.n	80050a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fa20 	bl	80034d8 <disk_status>
 8005098:	4603      	mov	r3, r0
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <validate+0x4e>
			res = FR_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d102      	bne.n	80050b2 <validate+0x5a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	e000      	b.n	80050b4 <validate+0x5c>
 80050b2:	2300      	movs	r3, #0
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	6013      	str	r3, [r2, #0]
	return res;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80050d6:	f107 0310 	add.w	r3, r7, #16
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fca2 	bl	8004a24 <get_ldnumber>
 80050e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	da01      	bge.n	80050ec <f_mount+0x28>
 80050e8:	230b      	movs	r3, #11
 80050ea:	e02b      	b.n	8005144 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <f_mount+0x88>)
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80050fc:	69b8      	ldr	r0, [r7, #24]
 80050fe:	f7fe fcd3 	bl	8003aa8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	490d      	ldr	r1, [pc, #52]	; (800514c <f_mount+0x88>)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <f_mount+0x66>
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d001      	beq.n	800512e <f_mount+0x6a>
 800512a:	2300      	movs	r3, #0
 800512c:	e00a      	b.n	8005144 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800512e:	f107 010c 	add.w	r1, r7, #12
 8005132:	f107 0308 	add.w	r3, r7, #8
 8005136:	2200      	movs	r2, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fd0d 	bl	8004b58 <find_volume>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005142:	7dfb      	ldrb	r3, [r7, #23]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3720      	adds	r7, #32
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	200000b8 	.word	0x200000b8

08005150 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b098      	sub	sp, #96	; 0x60
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <f_open+0x18>
 8005164:	2309      	movs	r3, #9
 8005166:	e1bb      	b.n	80054e0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800516e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005170:	79fa      	ldrb	r2, [r7, #7]
 8005172:	f107 0110 	add.w	r1, r7, #16
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff fcec 	bl	8004b58 <find_volume>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 819f 	bne.w	80054ce <f_open+0x37e>
		dj.obj.fs = fs;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fbcb 	bl	8004938 <follow_path>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80051a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11a      	bne.n	80051e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80051b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	da03      	bge.n	80051c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80051ba:	2306      	movs	r3, #6
 80051bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80051c0:	e011      	b.n	80051e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fb1c 	bl	8003818 <chk_lock>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	f003 031c 	and.w	r3, r3, #28
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d07f      	beq.n	80052f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80051f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80051f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d10e      	bne.n	800521e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005200:	f7fe fb66 	bl	80038d0 <enq_lock>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <f_open+0xc8>
 800520a:	f107 0314 	add.w	r3, r7, #20
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff facc 	bl	80047ac <dir_register>
 8005214:	4603      	mov	r3, r0
 8005216:	e000      	b.n	800521a <f_open+0xca>
 8005218:	2312      	movs	r3, #18
 800521a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	f043 0308 	orr.w	r3, r3, #8
 8005224:	71fb      	strb	r3, [r7, #7]
 8005226:	e010      	b.n	800524a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005228:	7ebb      	ldrb	r3, [r7, #26]
 800522a:	f003 0311 	and.w	r3, r3, #17
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <f_open+0xea>
					res = FR_DENIED;
 8005232:	2307      	movs	r3, #7
 8005234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005238:	e007      	b.n	800524a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <f_open+0xfa>
 8005244:	2308      	movs	r3, #8
 8005246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800524a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800524e:	2b00      	cmp	r3, #0
 8005250:	d168      	bne.n	8005324 <f_open+0x1d4>
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d063      	beq.n	8005324 <f_open+0x1d4>
				dw = GET_FATTIME();
 800525c:	f7fd ffd0 	bl	8003200 <get_fattime>
 8005260:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005264:	330e      	adds	r3, #14
 8005266:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fa2b 	bl	80036c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	3316      	adds	r3, #22
 8005272:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fa25 	bl	80036c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	330b      	adds	r3, #11
 800527e:	2220      	movs	r2, #32
 8005280:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff f9fb 	bl	8004684 <ld_clust>
 800528e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005294:	2200      	movs	r2, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fa13 	bl	80046c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	331c      	adds	r3, #28
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fa0e 	bl	80036c4 <st_dword>
					fs->wflag = 1;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2201      	movs	r2, #1
 80052ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d037      	beq.n	8005324 <f_open+0x1d4>
						dw = fs->winsect;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80052ba:	f107 0314 	add.w	r3, r7, #20
 80052be:	2200      	movs	r2, #0
 80052c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe ff03 	bl	80040ce <remove_chain>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80052ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d126      	bne.n	8005324 <f_open+0x1d4>
							res = move_window(fs, dw);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fc4c 	bl	8003b78 <move_window>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ea:	3a01      	subs	r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
 80052ee:	e019      	b.n	8005324 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80052f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d115      	bne.n	8005324 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80052f8:	7ebb      	ldrb	r3, [r7, #26]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <f_open+0x1ba>
					res = FR_NO_FILE;
 8005302:	2304      	movs	r3, #4
 8005304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005308:	e00c      	b.n	8005324 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <f_open+0x1d4>
 8005314:	7ebb      	ldrb	r3, [r7, #26]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <f_open+0x1d4>
						res = FR_DENIED;
 800531e:	2307      	movs	r3, #7
 8005320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005328:	2b00      	cmp	r3, #0
 800532a:	d128      	bne.n	800537e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	f107 0314 	add.w	r3, r7, #20
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe fad5 	bl	8003914 <inc_lock>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <f_open+0x22e>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800537e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 80a3 	bne.w	80054ce <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff f978 	bl	8004684 <ld_clust>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	331c      	adds	r3, #28
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f952 	bl	8003648 <ld_dword>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	88da      	ldrh	r2, [r3, #6]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	79fa      	ldrb	r2, [r7, #7]
 80053c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3330      	adds	r3, #48	; 0x30
 80053da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe f9bc 	bl	800375e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d06e      	beq.n	80054ce <f_open+0x37e>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d06a      	beq.n	80054ce <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	895b      	ldrh	r3, [r3, #10]
 8005404:	461a      	mov	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	899b      	ldrh	r3, [r3, #12]
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	657b      	str	r3, [r7, #84]	; 0x54
 800541c:	e016      	b.n	800544c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fc65 	bl	8003cf2 <get_fat>
 8005428:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800542a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800542c:	2b01      	cmp	r3, #1
 800542e:	d802      	bhi.n	8005436 <f_open+0x2e6>
 8005430:	2302      	movs	r3, #2
 8005432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d102      	bne.n	8005444 <f_open+0x2f4>
 800543e:	2301      	movs	r3, #1
 8005440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005444:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
 800544c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <f_open+0x30c>
 8005454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	429a      	cmp	r2, r3
 800545a:	d8e0      	bhi.n	800541e <f_open+0x2ce>
				}
				fp->clust = clst;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005460:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005466:	2b00      	cmp	r3, #0
 8005468:	d131      	bne.n	80054ce <f_open+0x37e>
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	899b      	ldrh	r3, [r3, #12]
 800546e:	461a      	mov	r2, r3
 8005470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005472:	fbb3 f1f2 	udiv	r1, r3, r2
 8005476:	fb01 f202 	mul.w	r2, r1, r2
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d026      	beq.n	80054ce <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe fc15 	bl	8003cb4 <clust2sect>
 800548a:	6478      	str	r0, [r7, #68]	; 0x44
 800548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <f_open+0x34a>
						res = FR_INT_ERR;
 8005492:	2302      	movs	r3, #2
 8005494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005498:	e019      	b.n	80054ce <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	899b      	ldrh	r3, [r3, #12]
 800549e:	461a      	mov	r2, r3
 80054a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80054a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a8:	441a      	add	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	7858      	ldrb	r0, [r3, #1]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	2301      	movs	r3, #1
 80054be:	f7fe f84d 	bl	800355c <disk_read>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <f_open+0x37e>
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80054ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <f_open+0x38c>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80054dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3760      	adds	r7, #96	; 0x60
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	; 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f107 0210 	add.w	r2, r7, #16
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fda5 	bl	8005058 <validate>
 800550e:	4603      	mov	r3, r0
 8005510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <f_write+0x44>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	7d5b      	ldrb	r3, [r3, #21]
 8005520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <f_write+0x4a>
 800552c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005530:	e16a      	b.n	8005808 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	7d1b      	ldrb	r3, [r3, #20]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <f_write+0x5a>
 800553e:	2307      	movs	r3, #7
 8005540:	e162      	b.n	8005808 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	429a      	cmp	r2, r3
 8005550:	f080 814c 	bcs.w	80057ec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	43db      	mvns	r3, r3
 800555a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800555c:	e146      	b.n	80057ec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	8992      	ldrh	r2, [r2, #12]
 8005566:	fbb3 f1f2 	udiv	r1, r3, r2
 800556a:	fb01 f202 	mul.w	r2, r1, r2
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f040 80f1 	bne.w	8005758 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	8992      	ldrh	r2, [r2, #12]
 800557e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	8952      	ldrh	r2, [r2, #10]
 8005586:	3a01      	subs	r2, #1
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d143      	bne.n	800561a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10c      	bne.n	80055b4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11a      	bne.n	80055dc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fdf4 	bl	8004198 <create_chain>
 80055b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80055b2:	e013      	b.n	80055dc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	4619      	mov	r1, r3
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7fe fe80 	bl	80042c8 <clmt_clust>
 80055c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80055ca:	e007      	b.n	80055dc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f7fe fddf 	bl	8004198 <create_chain>
 80055da:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8109 	beq.w	80057f6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d104      	bne.n	80055f4 <f_write+0x10c>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	755a      	strb	r2, [r3, #21]
 80055f0:	2302      	movs	r3, #2
 80055f2:	e109      	b.n	8005808 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d104      	bne.n	8005606 <f_write+0x11e>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	755a      	strb	r2, [r3, #21]
 8005602:	2301      	movs	r3, #1
 8005604:	e100      	b.n	8005808 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800560a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <f_write+0x132>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005618:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	7d1b      	ldrb	r3, [r3, #20]
 800561e:	b25b      	sxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	da18      	bge.n	8005656 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	7858      	ldrb	r0, [r3, #1]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	2301      	movs	r3, #1
 8005634:	f7fd ffb2 	bl	800359c <disk_write>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <f_write+0x160>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	755a      	strb	r2, [r3, #21]
 8005644:	2301      	movs	r3, #1
 8005646:	e0df      	b.n	8005808 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	7d1b      	ldrb	r3, [r3, #20]
 800564c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7fe fb28 	bl	8003cb4 <clust2sect>
 8005664:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <f_write+0x18e>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	755a      	strb	r2, [r3, #21]
 8005672:	2302      	movs	r3, #2
 8005674:	e0c8      	b.n	8005808 <f_write+0x320>
			sect += csect;
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	4413      	add	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	899b      	ldrh	r3, [r3, #12]
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	fbb3 f3f2 	udiv	r3, r3, r2
 800568a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d043      	beq.n	800571a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	4413      	add	r3, r2
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	8952      	ldrh	r2, [r2, #10]
 800569c:	4293      	cmp	r3, r2
 800569e:	d905      	bls.n	80056ac <f_write+0x1c4>
					cc = fs->csize - csect;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	895b      	ldrh	r3, [r3, #10]
 80056a4:	461a      	mov	r2, r3
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	7858      	ldrb	r0, [r3, #1]
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	69f9      	ldr	r1, [r7, #28]
 80056b6:	f7fd ff71 	bl	800359c <disk_write>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <f_write+0x1e2>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	755a      	strb	r2, [r3, #21]
 80056c6:	2301      	movs	r3, #1
 80056c8:	e09e      	b.n	8005808 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d918      	bls.n	800570a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	8992      	ldrh	r2, [r2, #12]
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	18d1      	adds	r1, r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	899b      	ldrh	r3, [r3, #12]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f7fe f810 	bl	800371c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	7d1b      	ldrb	r3, [r3, #20]
 8005700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	899b      	ldrh	r3, [r3, #12]
 800570e:	461a      	mov	r2, r3
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	fb02 f303 	mul.w	r3, r2, r3
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005718:	e04b      	b.n	80057b2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	429a      	cmp	r2, r3
 8005722:	d016      	beq.n	8005752 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800572c:	429a      	cmp	r2, r3
 800572e:	d210      	bcs.n	8005752 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	7858      	ldrb	r0, [r3, #1]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800573a:	2301      	movs	r3, #1
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	f7fd ff0d 	bl	800355c <disk_read>
 8005742:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	755a      	strb	r2, [r3, #21]
 800574e:	2301      	movs	r3, #1
 8005750:	e05a      	b.n	8005808 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	899b      	ldrh	r3, [r3, #12]
 800575c:	4618      	mov	r0, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	8992      	ldrh	r2, [r2, #12]
 8005766:	fbb3 f1f2 	udiv	r1, r3, r2
 800576a:	fb01 f202 	mul.w	r2, r1, r2
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	1ac3      	subs	r3, r0, r3
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d901      	bls.n	8005780 <f_write+0x298>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	8992      	ldrh	r2, [r2, #12]
 800578e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005792:	fb00 f202 	mul.w	r2, r0, r2
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	440b      	add	r3, r1
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fd ffbc 	bl	800371c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	7d1b      	ldrb	r3, [r3, #20]
 80057a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	4413      	add	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	619a      	str	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	bf38      	it	cc
 80057d2:	461a      	movcc	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	441a      	add	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f47f aeb5 	bne.w	800555e <f_write+0x76>
 80057f4:	e000      	b.n	80057f8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80057f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	7d1b      	ldrb	r3, [r3, #20]
 80057fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3730      	adds	r7, #48	; 0x30
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f107 0208 	add.w	r2, r7, #8
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fc19 	bl	8005058 <validate>
 8005826:	4603      	mov	r3, r0
 8005828:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800582a:	7dfb      	ldrb	r3, [r7, #23]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d168      	bne.n	8005902 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	7d1b      	ldrb	r3, [r3, #20]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d062      	beq.n	8005902 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	7d1b      	ldrb	r3, [r3, #20]
 8005840:	b25b      	sxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	da15      	bge.n	8005872 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	7858      	ldrb	r0, [r3, #1]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	2301      	movs	r3, #1
 8005856:	f7fd fea1 	bl	800359c <disk_write>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <f_sync+0x54>
 8005860:	2301      	movs	r3, #1
 8005862:	e04f      	b.n	8005904 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7d1b      	ldrb	r3, [r3, #20]
 8005868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586c:	b2da      	uxtb	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005872:	f7fd fcc5 	bl	8003200 <get_fattime>
 8005876:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f7fe f979 	bl	8003b78 <move_window>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d138      	bne.n	8005902 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	330b      	adds	r3, #11
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	330b      	adds	r3, #11
 80058a0:	f042 0220 	orr.w	r2, r2, #32
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f7fe ff05 	bl	80046c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f103 021c 	add.w	r2, r3, #28
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f7fd fefd 	bl	80036c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	3316      	adds	r3, #22
 80058ce:	6939      	ldr	r1, [r7, #16]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fd fef7 	bl	80036c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3312      	adds	r3, #18
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fd fed6 	bl	800368e <st_word>
					fs->wflag = 1;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2201      	movs	r2, #1
 80058e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe f972 	bl	8003bd4 <sync_fs>
 80058f0:	4603      	mov	r3, r0
 80058f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	7d1b      	ldrb	r3, [r3, #20]
 80058f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff7b 	bl	8005810 <f_sync>
 800591a:	4603      	mov	r3, r0
 800591c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d118      	bne.n	8005956 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f107 0208 	add.w	r2, r7, #8
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fb93 	bl	8005058 <validate>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10c      	bne.n	8005956 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe f875 	bl	8003a30 <dec_lock>
 8005946:	4603      	mov	r3, r0
 8005948:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800596e:	2301      	movs	r3, #1
 8005970:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005976:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 8005978:	7a5b      	ldrb	r3, [r3, #9]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d131      	bne.n	80059e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005980:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 8005982:	7a5b      	ldrb	r3, [r3, #9]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 800598a:	2100      	movs	r1, #0
 800598c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800598e:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 8005990:	7a5b      	ldrb	r3, [r3, #9]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	4a17      	ldr	r2, [pc, #92]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800599e:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 80059a0:	7a5b      	ldrb	r3, [r3, #9]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 80059a8:	4413      	add	r3, r2
 80059aa:	79fa      	ldrb	r2, [r7, #7]
 80059ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80059ae:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 80059b0:	7a5b      	ldrb	r3, [r3, #9]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	b2d1      	uxtb	r1, r2
 80059b8:	4a0e      	ldr	r2, [pc, #56]	; (80059f4 <FATFS_LinkDriverEx+0x94>)
 80059ba:	7251      	strb	r1, [r2, #9]
 80059bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80059be:	7dbb      	ldrb	r3, [r7, #22]
 80059c0:	3330      	adds	r3, #48	; 0x30
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	3301      	adds	r3, #1
 80059cc:	223a      	movs	r2, #58	; 0x3a
 80059ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	3302      	adds	r3, #2
 80059d4:	222f      	movs	r2, #47	; 0x2f
 80059d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	3303      	adds	r3, #3
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	200000e0 	.word	0x200000e0

080059f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a02:	2200      	movs	r2, #0
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ffaa 	bl	8005960 <FATFS_LinkDriverEx>
 8005a0c:	4603      	mov	r3, r0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <memset>:
 8005a16:	4402      	add	r2, r0
 8005a18:	4603      	mov	r3, r0
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d100      	bne.n	8005a20 <memset+0xa>
 8005a1e:	4770      	bx	lr
 8005a20:	f803 1b01 	strb.w	r1, [r3], #1
 8005a24:	e7f9      	b.n	8005a1a <memset+0x4>
	...

08005a28 <__libc_init_array>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	4d0d      	ldr	r5, [pc, #52]	; (8005a60 <__libc_init_array+0x38>)
 8005a2c:	4c0d      	ldr	r4, [pc, #52]	; (8005a64 <__libc_init_array+0x3c>)
 8005a2e:	1b64      	subs	r4, r4, r5
 8005a30:	10a4      	asrs	r4, r4, #2
 8005a32:	2600      	movs	r6, #0
 8005a34:	42a6      	cmp	r6, r4
 8005a36:	d109      	bne.n	8005a4c <__libc_init_array+0x24>
 8005a38:	4d0b      	ldr	r5, [pc, #44]	; (8005a68 <__libc_init_array+0x40>)
 8005a3a:	4c0c      	ldr	r4, [pc, #48]	; (8005a6c <__libc_init_array+0x44>)
 8005a3c:	f000 f826 	bl	8005a8c <_init>
 8005a40:	1b64      	subs	r4, r4, r5
 8005a42:	10a4      	asrs	r4, r4, #2
 8005a44:	2600      	movs	r6, #0
 8005a46:	42a6      	cmp	r6, r4
 8005a48:	d105      	bne.n	8005a56 <__libc_init_array+0x2e>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a50:	4798      	blx	r3
 8005a52:	3601      	adds	r6, #1
 8005a54:	e7ee      	b.n	8005a34 <__libc_init_array+0xc>
 8005a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5a:	4798      	blx	r3
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	e7f2      	b.n	8005a46 <__libc_init_array+0x1e>
 8005a60:	08005be4 	.word	0x08005be4
 8005a64:	08005be4 	.word	0x08005be4
 8005a68:	08005be4 	.word	0x08005be4
 8005a6c:	08005be8 	.word	0x08005be8

08005a70 <memcpy>:
 8005a70:	440a      	add	r2, r1
 8005a72:	4291      	cmp	r1, r2
 8005a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a78:	d100      	bne.n	8005a7c <memcpy+0xc>
 8005a7a:	4770      	bx	lr
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a86:	4291      	cmp	r1, r2
 8005a88:	d1f9      	bne.n	8005a7e <memcpy+0xe>
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <_init>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr

08005a98 <_fini>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr
